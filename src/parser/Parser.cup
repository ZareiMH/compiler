package parser;

import java_cup.runtime.*;
import ast.*;

parser code {:
    protected Program root;

    void setRoot(Program p) { this.root = p; }

    public Program getRoot() { return this.root; }
:};


/* terminal and nonterminal part */

// some shit that I don't know
terminal String ID;

// symbols
terminal LCURLY, RCURLY, LBRACK, RBRACK, LPAREN, RPAREN;
terminal DOT, COMMA, COLON, SEMICOLON;

// comment
terminal SINGLELINECOMM;
terminal MULTILINECOMMSTART;
terminal MULTILINECOMMFINISH;

// strings
terminal APOST, QUOTE;

// reserved shit
terminal EXTERN, FUNCTION, BEGIN, BOOL, BREAK, CASE, CHAR;
terminal CONST, CONTINUE, DEFAULT, DOUBLE, ELSE, END;
terminal FLOAT, FOR, IF, INT, LONG, RETURN, RECORD;
terminal SIZEOF, STRING, SWITCH, OF;
terminal FOREACH, UNTIL, IN, REPEAT;
terminal AUTO, VOID, NULL;

//literals
terminal Integer INTCONST;
terminal Double REALCONST;
terminal Character CHARCONST;
terminal Boolean FALSE;
terminal Boolean TRUE;
terminal String STRINGCONST;
terminal Long LONGCONST;

// arithmatic
terminal EQ, NOTEQ, LESSEQ, LESS, GR, GREQ, ASSIGN, NOT;
terminal BITNEG, ARITHAND, LOGICAND, ARITHOR, XOR;
terminal PROD, ADD, ADDASS, SUBASS, MULTASS, DIVASS;
terminal DIV, MOD, MINUS, LOGICOR, UMINUS, UPLUS;
terminal POSTINC, POSTDEC, PREINC, PREDEC, INC, DEC;
terminal FPAREN, REFERENCE, ARRELEMENT;

// nonterminal part
nonterminal ASTNode program;
nonterminal ASTNode program2;
nonterminal ASTNode var_dcl;
nonterminal ASTNode func_extern;
nonterminal ASTNode struct_dec;
nonterminal ASTNode func_dcl;
nonterminal ASTNode extern_dcl;
nonterminal ASTNode type;
nonterminal ASTNode arguments;
nonterminal ASTNode block;
nonterminal ASTNode var_dcl_cnt;
nonterminal ASTNode variable;
nonterminal ASTNode expr;
nonterminal ASTNode statement;
nonterminal ASTNode assignment;
nonterminal ASTNode method_call;
nonterminal ASTNode cond_stmt;
nonterminal ASTNode loop_stmt;
nonterminal ASTNode parameters;
nonterminal ASTNode const_val;
nonterminal ASTNode arguments_middle;
nonterminal ASTNode struct_dec_middle;
nonterminal ASTNode var_dcl_end;
nonterminal ASTNode block_mid;
nonterminal ASTNode cond_stmt_mid;
nonterminal ASTNode variable_mid;
nonterminal ASTNode identifier;
nonterminal ASTNode expr_operation;
nonterminal ASTNode expression_assignment;


/* precedence part */
precedence left COMMA;
precedence right ASSIGN, ADDASS, SUBASS, MULTASS, DIVASS;
precedence left LOGICOR;
precedence left LOGICAND;
precedence left ARITHOR;
precedence left XOR;
precedence left ARITHAND;
precedence left EQ, NOTEQ;
precedence left LESS, LESSEQ, GR, GREQ;
precedence left ADD, MINUS;
precedence left PROD, DIV, MOD;
precedence right NOT, BITNEG, UMINUS, UPLUS, PREINC, PREDEC, SIZEOF;
precedence left POSTINC, POSTDEC, FPAREN, REFERENCE, ARRELEMENT;
precedence nonassoc LPAREN, RPAREN;

/* grammar part */
start with program;

// added for code gen
identifier ::=
    ID:i
        {: RESULT = new IdentifierNode(i); :};

const_val ::=
    INTCONST:i
        {: RESULT = new IntegerLiteralNode(i); :}
    | REALCONST:r
        {: RESULT = new FloatLiteralNode(r); :}
    | CHARCONST:c
        {: RESULT = new CharLiteralNode(c); :}
    | FALSE
        {: RESULT = new BooleanLiteralNode(false); :}
    | TRUE
        {: RESULT = new BooleanLiteralNode(true); :}
    | STRINGCONST:s
	    {: RESULT = new StringLiteralNode(s); :}
    | LONGCONST:l
	    {: RESULT = new LongLiteralNode(l); :}
    | NULL
    	{: RESULT = new BaseASTNode(NodeType.NULL_LITERAL); :};

program ::=
    program2:t
        {:
           Program p = new Program();
           p.addChild(t);
           setRoot(p);
        :};

program2 ::=
    program2:p var_dcl:t
        {:
           RESULT = p;
           RESULT.addChild(t);
        :}
    | program2:p func_extern:t
        {:
           RESULT = p;
           RESULT.addChild(t);
        :}
    | program2:p struct_dec:t
        {:
           RESULT = p;
           RESULT.addChild(t);
        :}
    | var_dcl:t
        {: RESULT = t; :}
    | func_extern:t
	    {: RESULT = t; :}
    | struct_dec:t
	    {: RESULT = t; :};

func_extern ::=
    func_dcl:t
        {: RESULT = t; :}
    | extern_dcl:t
        {: RESULT = t; :};

func_dcl ::=
    FUNCTION type:t identifier:i LPAREN arguments:a RPAREN SEMICOLON
        {:
           RESULT = new BaseASTNode(NodeType.METHOD_DECLARATION);
           ASTNode b = new BaseASTNode(NodeType.BLOCK);
           RESULT.addChild(t, i, a, b);
        :}
    | FUNCTION type:t identifier:i LPAREN RPAREN SEMICOLON
        {:
           RESULT = new BaseASTNode(NodeType.METHOD_DECLARATION);
           ASTNode b = new BaseASTNode(NodeType.BLOCK);
           ASTNode a = new BaseASTNode(NodeType.ARGUMENTS);
           RESULT.addChild(t, i, a, b);
        :}
    | FUNCTION type:t identifier:i LPAREN arguments:a RPAREN block:b
        {:
           RESULT = new BaseASTNode(NodeType.METHOD_DECLARATION);
           RESULT.addChild(t, i, a, b);
        :}
    | FUNCTION type:t identifier:i LPAREN RPAREN block:b
        {:
           RESULT = new BaseASTNode(NodeType.METHOD_DECLARATION);
           ASTNode a = new BaseASTNode(NodeType.ARGUMENTS);
           RESULT.addChild(t, i, a, b);
        :};

extern_dcl ::=
    EXTERN type:t identifier:i
        {:
            RESULT = new BaseASTNode(NodeType.VARIABLE_DECLARATION);
            RESULT.addChild(t, i);
        :};

arguments ::=
    type:t identifier:i
        {:
            RESULT = new BaseASTNode(NodeType.ARGUMENTS);
            ASTNode a = new BaseASTNode(NodeType.ARGUMENT);
            a.addChild(t, i);
            RESULT.addChild(a);
        :}
    | type:t identifier:i arguments_middle:am
//        {:
//            RESULT = am;
//            ASTNode a = new BaseASTNode(NodeType.ARGUMENT);
//            a.addChild(t, i);
//            RESULT.addChild(a);
//        :}
    | arguments:as COMMA type:t identifier:i
        {:
            RESULT = as;
            ASTNode a = new BaseASTNode(NodeType.ARGUMENT);
            a.addChild(t, i);
            RESULT.addChild(a);
        :}
    | arguments:a COMMA type:t identifier:i arguments_middle:am
//        {:
//            RESULT = a;
//            RESULT.addChild(t, i, am);
//        :}
;

arguments_middle ::=
    LBRACK RBRACK
//    {: RESULT = new BaseASTNode(NodeType.NOT_EQUAL); :}
    | arguments_middle:am LBRACK RBRACK
//    {: RESULT = new BaseASTNode(NodeType.NOT_EQUAL); :}
;

type ::=
    INT
        {: RESULT = new TypeNode(NodeType.INT_TYPE, PrimitiveType.INT); :}
    | BOOL
        {: RESULT = new TypeNode(NodeType.BOOLEAN_TYPE, PrimitiveType.BOOL); :}
    | FLOAT
        {: RESULT = new TypeNode(NodeType.FLOAT_TYPE, PrimitiveType.FLOAT); :}
    | LONG
        {: RESULT = new TypeNode(NodeType.LONG_TYPE, PrimitiveType.LONG); :}
    | CHAR
        {: RESULT = new TypeNode(NodeType.CHAR_TYPE, PrimitiveType.CHAR); :}
    | DOUBLE
        {: RESULT = new TypeNode(NodeType.DOUBLE_TYPE, PrimitiveType.DOUBLE); :}
    | STRING
        {: RESULT = new TypeNode(NodeType.STRING_TYPE, PrimitiveType.STRING); :}
    | VOID
        {: RESULT = new TypeNode(NodeType.VOID, PrimitiveType.VOID); :}
    | AUTO
        {: RESULT = new TypeNode(NodeType.AUTO_TYPE, PrimitiveType.AUTO); :}
    | identifier:t
	    {: RESULT = t; :};

struct_dec ::=
    RECORD identifier:i BEGIN struct_dec_middle:sdm END RECORD
        {:
            RESULT = new BaseASTNode(NodeType.STRUCT_DECLARATION);
            RESULT.addChild(i, sdm);
        :};

struct_dec_middle ::=
    var_dcl:v
        {: RESULT = v; :}
    | struct_dec_middle:s var_dcl:vd
        {:
            RESULT = s;
            RESULT.addChild(vd);
        :};

var_dcl ::=
    type:t var_dcl_cnt:vdc var_dcl_end:vde SEMICOLON
        {:
            RESULT =  new BaseASTNode(NodeType.VARIABLE_DECLARATION);
            RESULT.addChild(t, vdc, vde);
        :}
    | CONST type:t var_dcl_cnt:vdc var_dcl_end:vde SEMICOLON
        {:
            RESULT =  new BaseASTNode(NodeType.VARIABLE_CONST_DECLARATION);
            RESULT.addChild(t, vdc, vde);
        :}
	| type:t var_dcl_cnt:vdc SEMICOLON
        {:
            RESULT =  new BaseASTNode(NodeType.VARIABLE_DECLARATION);
            ASTNode vde = new BaseASTNode(NodeType.VARIABLE_DECLARATION);
            RESULT.addChild(t, vdc, vde);
        :}
	| CONST type:t var_dcl_cnt:vdc SEMICOLON
        {:
            RESULT =  new BaseASTNode(NodeType.VARIABLE_CONST_DECLARATION);
            ASTNode vde = new BaseASTNode(NodeType.VARIABLE_CONST_DECLARATION);
            RESULT.addChild(t, vdc, vde);
        :};

var_dcl_end ::=
    var_dcl_end:vde COMMA var_dcl_cnt:vdc
        {:
            RESULT = vde;
            RESULT.addChild(vdc);
        :}
    | COMMA var_dcl_cnt:vdc
        {: RESULT = vdc; :};

var_dcl_cnt ::=
    identifier:i
        {:
            RESULT = i;
        :}
    | identifier:i ASSIGN expr:e
        {:
            RESULT = i;
            RESULT.addChild(e);
        :};

block ::=
    BEGIN block_mid:b END
        {: RESULT = b; :}
    | BEGIN END
        {: RESULT = new BaseASTNode(NodeType.BLOCK); :};

block_mid ::=
    block_mid:b var_dcl:vd
        {:
            RESULT = b;
            RESULT.addChild(vd);
        :}
    | block_mid:b statement:s
        {:
            RESULT = b;
            RESULT.addChild(s);
        :}
    | var_dcl:vd
        {:
            RESULT = new BaseASTNode(NodeType.BLOCK);
            RESULT.addChild(vd);
        :}
    | statement:s
        {:
            RESULT = new BaseASTNode(NodeType.BLOCK);
            RESULT.addChild(s);
        :};

statement ::=
    assignment:t SEMICOLON
        {: RESULT = t; :}
    | method_call:t SEMICOLON
        {: RESULT = t; :}
    | cond_stmt:t
        {: RESULT = t; :}
    | loop_stmt:t
        {: RESULT = t; :}
    | RETURN expr:e SEMICOLON
        {:
            RESULT = new BaseASTNode(NodeType.RETURN_STATEMENT);
            RESULT.addChild(e);
        :}
    | RETURN SEMICOLON
        {: RESULT = new BaseASTNode(NodeType.RETURN_STATEMENT); :}
    | BREAK SEMICOLON
        {: RESULT = new BaseASTNode(NodeType.BREAK_STATEMENT); :}
    | CONTINUE SEMICOLON
        {: RESULT = new BaseASTNode(NodeType.CONTINUE_STATEMENT); :};

assignment ::=
    variable:v ASSIGN expr:e
        {:
            RESULT = new BaseASTNode(NodeType.ASSIGN);
            RESULT.addChild(v,e);
        :}
    | variable:v ADDASS expr:e
        {:
            RESULT = new BaseASTNode(NodeType.ADD_ASSIGN);
            RESULT.addChild(v,e);
        :}
    | variable:v SUBASS expr:e
        {:
            RESULT = new BaseASTNode(NodeType.SUB_ASSIGN);
            RESULT.addChild(v,e);
        :}
    | variable:v MULTASS expr:e
        {:
            RESULT = new BaseASTNode(NodeType.MULT_ASSIGN);
            RESULT.addChild(v,e);
        :}
    | variable:v DIVASS expr:e
        {:
            RESULT = new BaseASTNode(NodeType.DIV_ASSIGN);
            RESULT.addChild(v,e);
        :};

method_call ::=
    identifier:i LPAREN parameters:ps RPAREN
        {:
            RESULT = new BaseASTNode(NodeType.METHOD_ACCESS);
            RESULT.addChild(i, ps);
        :} %prec FPAREN
    | identifier:i LPAREN RPAREN
        {:
            RESULT = new BaseASTNode(NodeType.METHOD_ACCESS);
            ASTNode ps = new BaseASTNode(NodeType.PARAMETERS);
            RESULT.addChild(i, ps);
        :} %prec FPAREN;

parameters ::=
    expr:e
        {:
            RESULT = new BaseASTNode(NodeType.PARAMETERS);
            ASTNode p = new BaseASTNode(NodeType.PARAMETER);
            p.addChild(e);
            RESULT.addChild(p);
        :}
    | parameters:ps COMMA expr:e
        {:
            RESULT = ps;
            ASTNode p = new BaseASTNode(NodeType.PARAMETER);
            p.addChild(e);
            RESULT.addChild(p);
        :};

cond_stmt ::=
    IF LPAREN expr:e RPAREN block:b
        {:
            RESULT = new BaseASTNode(NodeType.IF_STATEMENT);
            RESULT.addChild(e, b);
        :}
    | IF LPAREN expr:e RPAREN block:b_if ELSE block:b_else
        {:
            RESULT = new BaseASTNode(NodeType.IF_STATEMENT);
            RESULT.addChild(e, b_if, b_else);
        :}
    | SWITCH LPAREN identifier:i RPAREN OF COLON BEGIN DEFAULT COLON block:b END
        {:
            RESULT = new BaseASTNode(NodeType.SWITCH_STATEMENT);
            ASTNode s = new BaseASTNode(NodeType.CASE_STATEMENT);
            RESULT.addChild(i, s, b);
        :}
    | SWITCH LPAREN identifier:i RPAREN OF COLON BEGIN cond_stmt_mid:s DEFAULT COLON block:b END
        {:
            RESULT = new BaseASTNode(NodeType.SWITCH_STATEMENT);
            RESULT.addChild(i, s, b);
        :};

cond_stmt_mid ::=
    CASE INTCONST COLON block:b
        {:
            RESULT = new BaseASTNode(NodeType.CASE_STATEMENT);
            RESULT.addChild(b);
        :}
    | cond_stmt_mid:s CASE INTCONST COLON block:b
        {:
            RESULT = s;
            RESULT.addChild(b);
        :};

loop_stmt ::=
    FOR LPAREN assignment:i SEMICOLON expr:be SEMICOLON expression_assignment:ea RPAREN block:b
        {:
            RESULT = new BaseASTNode(NodeType.FOR_STATEMENT);
            RESULT.addChild(i, be, ea);
        :}
    | FOR LPAREN SEMICOLON expr:be SEMICOLON expression_assignment:ea RPAREN block:b
        {:
            RESULT = new BaseASTNode(NodeType.FOR_STATEMENT);
            ASTNode i = new BaseASTNode(NodeType.ASSIGN);
            RESULT.addChild(i, be, ea);
        :}
    | FOR LPAREN assignment:i SEMICOLON expr:be SEMICOLON RPAREN block
        {:
            RESULT = new BaseASTNode(NodeType.FOR_STATEMENT);
            ASTNode ea = new BaseASTNode(NodeType.ASSIGN);
            RESULT.addChild(i, be, ea);
        :}
    | FOR LPAREN SEMICOLON expr:be SEMICOLON RPAREN block:b
        {:
            RESULT = new BaseASTNode(NodeType.FOR_STATEMENT);
            ASTNode ea = new BaseASTNode(NodeType.ASSIGN);
            ASTNode i = new BaseASTNode(NodeType.ASSIGN);
            RESULT.addChild(i, be, ea);
        :}
	| REPEAT block:b UNTIL LPAREN expr:be RPAREN SEMICOLON
	    {:
	        RESULT = new BaseASTNode(NodeType.REPEAT_STATEMENT);
	        RESULT.addChild(b, be);
	    :}
	| FOREACH LPAREN identifier:r IN identifier:i RPAREN block:b
	    {:
	        RESULT = new BaseASTNode(NodeType.FOREACH_STATEMENT);
	        RESULT.addChild(r, i);
	    :};

expression_assignment ::=
    expr:t
        {: RESULT = t; :}
    | assignment:t
        {: RESULT = t; :};

expr ::=
    expr_operation:t
        {: RESULT = t; :}
    | LPAREN expr:t RPAREN
        {: RESULT = t; :}
    | method_call:t
        {: RESULT = t; :}
    | variable:t
        {: RESULT = t; :}
    | const_val:t
        {: RESULT = t; :}
    | DEC variable:v
        {:
            RESULT = new BaseASTNode(NodeType.DECREMENT);
            RESULT.addChild(v);
        :} %prec PREDEC
    | variable:v DEC
        {:
            RESULT = new BaseASTNode(NodeType.DECREMENT);
            RESULT.addChild(v);
        :} %prec POSTDEC
    | INC variable:v
        {:
            RESULT = new BaseASTNode(NodeType.INCREASMENT);
            RESULT.addChild(v);
        :} %prec PREINC
    | variable:v INC
        {:
            RESULT = new BaseASTNode(NodeType.INCREASMENT);
            RESULT.addChild(v);
        :} %prec POSTINC
    | BITNEG expr:e
        {:
            RESULT = new BaseASTNode(NodeType.BITWISE_NEGATIVE);
            RESULT.addChild(e);
        :}
    | SIZEOF LPAREN type:t RPAREN
        {:
            RESULT = new BaseASTNode(NodeType.SIZEOF);
            RESULT.addChild(t);
        :} %prec SIZEOF
    | MINUS expr:e
        {:
            RESULT = new BaseASTNode(NodeType.UNARY_MINUS);
            RESULT.addChild(e);
        :} %prec UMINUS
    | ADD expr:e
        {:
            RESULT = new BaseASTNode(NodeType.UNARY_PLUS);
            RESULT.addChild(e);
        :} %prec UPLUS
;

variable ::=
    identifier:i
        {:
            RESULT = new BaseASTNode(NodeType.VAR_USE);
            RESULT.addChild(i);
        :}
    | identifier:i variable_mid:vm
//        {: RESULT = new BaseASTNode(NodeType.NOT_EQUAL); :}
    | variable:v DOT identifier:i %prec REFERENCE
//        {: RESULT = new BaseASTNode(NodeType.NOT_EQUAL); :}
    | LPAREN variable:v RPAREN
//        {: RESULT = new BaseASTNode(NodeType.NOT_EQUAL); :}
;

variable_mid ::=
    LBRACK expr:e RBRACK %prec ARRELEMENT
//        {: RESULT = new BaseASTNode(NodeType.NOT_EQUAL); :}
    | LBRACK expr:e RBRACK variable_mid:vm %prec ARRELEMENT
//        {: RESULT = new BaseASTNode(NodeType.NOT_EQUAL); :}
;

expr_operation ::=
    expr:e1 ADD expr:e2
        {:
            RESULT = new BaseASTNode(NodeType.ADDITION);
            RESULT.addChild(e1);
            RESULT.addChild(e2);
        :}
    | expr:e1 MINUS expr:e2
        {:
            RESULT = new BaseASTNode(NodeType.SUBTRACTION);
            RESULT.addChild(e1);
            RESULT.addChild(e2);
        :}
    | expr:e1 PROD expr:e2
        {:
            RESULT = new BaseASTNode(NodeType.MULTIPLICATION);
            RESULT.addChild(e1);
            RESULT.addChild(e2);
        :}
    | expr:e1 DIV expr:e2
        {:
            RESULT = new BaseASTNode(NodeType.DIVISION);
            RESULT.addChild(e1);
            RESULT.addChild(e2);
        :}
    | expr:e1 MOD expr:e2
        {:
            RESULT = new BaseASTNode(NodeType.MOD);
            RESULT.addChild(e1);
            RESULT.addChild(e2);
        :}
    | expr:e1 ARITHAND expr:e2
        {:
            RESULT = new BaseASTNode(NodeType.ARITHMETIC_AND);
            RESULT.addChild(e1);
            RESULT.addChild(e2);
        :}
    | expr:e1 ARITHOR expr:e2
        {:
            RESULT = new BaseASTNode(NodeType.ARITHMETIC_OR);
            RESULT.addChild(e1);
            RESULT.addChild(e2);
        :}
    | expr:e1 XOR expr:e2
        {:
            RESULT = new BaseASTNode(NodeType.XOR);
            RESULT.addChild(e1);
            RESULT.addChild(e2);
        :}
    | expr:e1 EQ expr:e2
        {:
            RESULT = new BaseASTNode(NodeType.EQUAL);
            RESULT.addChild(e1);
            RESULT.addChild(e2);
        :}
    | expr:e1 NOTEQ expr:e2
        {:
            RESULT = new BaseASTNode(NodeType.NOT_EQUAL);
            RESULT.addChild(e1);
            RESULT.addChild(e2);
        :}
    | expr:e1 GREQ expr:e2
        {:
            RESULT = new BaseASTNode(NodeType.GREATER_THAN_OR_EQUAL);
            RESULT.addChild(e1);
            RESULT.addChild(e2);
        :}
    | expr:e1 LESSEQ expr:e2
        {:
            RESULT = new BaseASTNode(NodeType.LESS_THAN_OR_EQUAL);
            RESULT.addChild(e1);
            RESULT.addChild(e2);
        :}
    | expr:e1 GR expr:e2
        {:
            RESULT = new BaseASTNode(NodeType.GREATER_THAN);
            RESULT.addChild(e1);
            RESULT.addChild(e2);
        :}
    | expr:e1 LESS expr:e2
        {:
            RESULT = new BaseASTNode(NodeType.LESS_THAN);
            RESULT.addChild(e1);
            RESULT.addChild(e2);
        :}
    | expr:e1 NOT expr:e2
        {:
            RESULT = new BaseASTNode(NodeType.BOOLEAN_NOT);
            RESULT.addChild(e1);
            RESULT.addChild(e2);
        :}
    | expr:e1 LOGICAND expr:e2
        {:
            RESULT = new BaseASTNode(NodeType.BOOLEAN_AND);
            RESULT.addChild(e1);
            RESULT.addChild(e2);
        :}
    | expr:e1 LOGICOR expr:e2
        {:
            RESULT = new BaseASTNode(NodeType.BOOLEAN_OR);
            RESULT.addChild(e1);
            RESULT.addChild(e2);
        :};