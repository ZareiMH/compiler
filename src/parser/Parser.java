
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import ast.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\174\000\002\002\004\000\002\034\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\002\003\000\002\003\004\000\002" +
    "\003\004\000\002\003\004\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\005\003\000\002\005\003" +
    "\000\002\007\011\000\002\007\010\000\002\007\011\000" +
    "\002\007\010\000\002\010\005\000\002\012\004\000\002" +
    "\012\005\000\002\012\006\000\002\012\007\000\002\026" +
    "\004\000\002\026\005\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\006\010\000\002\027" +
    "\003\000\002\027\004\000\002\004\006\000\002\004\007" +
    "\000\002\004\005\000\002\004\006\000\002\030\005\000" +
    "\002\030\004\000\002\014\003\000\002\014\005\000\002" +
    "\013\005\000\002\013\004\000\002\031\004\000\002\031" +
    "\004\000\002\031\003\000\002\031\003\000\002\017\004" +
    "\000\002\017\004\000\002\017\003\000\002\017\003\000" +
    "\002\017\005\000\002\017\004\000\002\017\004\000\002" +
    "\017\004\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\021\006" +
    "\000\002\021\005\000\002\024\003\000\002\024\005\000" +
    "\002\022\007\000\002\022\011\000\002\022\015\000\002" +
    "\022\016\000\002\032\006\000\002\032\007\000\002\023" +
    "\013\000\002\023\012\000\002\023\012\000\002\023\011" +
    "\000\002\023\011\000\002\023\011\000\002\036\003\000" +
    "\002\036\003\000\002\016\003\000\002\016\005\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\004\000\002\016\004\000\002\016\004\000\002\016\004" +
    "\000\002\016\004\000\002\016\006\000\002\016\004\000" +
    "\002\016\004\000\002\015\003\000\002\015\004\000\002" +
    "\015\005\000\002\015\005\000\002\033\005\000\002\033" +
    "\006\000\002\035\005\000\002\035\005\000\002\035\005" +
    "\000\002\035\005\000\002\035\005\000\002\035\005\000" +
    "\002\035\005\000\002\035\005\000\002\035\005\000\002" +
    "\035\005\000\002\035\005\000\002\035\005\000\002\035" +
    "\005\000\002\035\005\000\002\035\005\000\002\035\005" +
    "\000\002\035\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\377\000\036\004\017\024\004\025\015\027\027\032" +
    "\012\033\025\036\032\041\022\044\010\045\005\047\024" +
    "\051\021\060\023\061\030\001\002\000\026\004\017\027" +
    "\027\032\012\036\032\041\022\044\010\045\005\051\021" +
    "\060\023\061\030\001\002\000\032\004\uffe0\012\uffe0\027" +
    "\uffe0\032\uffe0\033\uffe0\036\uffe0\041\uffe0\044\uffe0\045\uffe0" +
    "\051\uffe0\060\uffe0\061\uffe0\001\002\000\040\002\ufff1\004" +
    "\017\024\004\025\015\027\027\032\012\033\025\036\032" +
    "\041\022\044\010\045\005\047\024\051\021\060\023\061" +
    "\030\001\002\000\032\004\uffda\012\uffda\027\uffda\032\uffda" +
    "\033\uffda\036\uffda\041\uffda\044\uffda\045\uffda\051\uffda\060" +
    "\uffda\061\uffda\001\002\000\032\004\uffe3\012\uffe3\027\uffe3" +
    "\032\uffe3\033\uffe3\036\uffe3\041\uffe3\044\uffe3\045\uffe3\051" +
    "\uffe3\060\uffe3\061\uffe3\001\002\000\040\002\uffef\004\uffef" +
    "\024\uffef\025\uffef\027\uffef\032\uffef\033\uffef\036\uffef\041" +
    "\uffef\044\uffef\045\uffef\047\uffef\051\uffef\060\uffef\061\uffef" +
    "\001\002\000\032\004\uffdf\012\uffdf\027\uffdf\032\uffdf\033" +
    "\uffdf\036\uffdf\041\uffdf\044\uffdf\045\uffdf\051\uffdf\060\uffdf" +
    "\061\uffdf\001\002\000\004\004\017\001\002\000\040\002" +
    "\ufff0\004\ufff0\024\ufff0\025\ufff0\027\ufff0\032\ufff0\033\ufff0" +
    "\036\ufff0\041\ufff0\044\ufff0\045\ufff0\047\ufff0\051\ufff0\060" +
    "\ufff0\061\ufff0\001\002\000\026\004\017\027\027\032\012" +
    "\036\032\041\022\044\010\045\005\051\021\060\023\061" +
    "\030\001\002\000\004\002\204\001\002\000\142\002\000" +
    "\004\000\007\000\010\000\011\000\012\000\013\000\014" +
    "\000\016\000\024\000\025\000\026\000\027\000\032\000" +
    "\033\000\036\000\041\000\044\000\045\000\047\000\051" +
    "\000\056\000\060\000\061\000\072\000\073\000\074\000" +
    "\075\000\076\000\077\000\100\000\101\000\103\000\104" +
    "\000\105\000\106\000\107\000\110\000\111\000\112\000" +
    "\113\000\114\000\115\000\116\000\117\000\120\000\127" +
    "\000\130\000\001\002\000\004\002\ufff7\001\002\000\032" +
    "\004\uffdd\012\uffdd\027\uffdd\032\uffdd\033\uffdd\036\uffdd\041" +
    "\uffdd\044\uffdd\045\uffdd\051\uffdd\060\uffdd\061\uffdd\001\002" +
    "\000\032\004\uffe1\012\uffe1\027\uffe1\032\uffe1\033\uffe1\036" +
    "\uffe1\041\uffe1\044\uffe1\045\uffe1\051\uffe1\060\uffe1\061\uffe1" +
    "\001\002\000\032\004\uffdb\012\uffdb\027\uffdb\032\uffdb\033" +
    "\uffdb\036\uffdb\041\uffdb\044\uffdb\045\uffdb\051\uffdb\060\uffdb" +
    "\061\uffdb\001\002\000\004\004\017\001\002\000\026\004" +
    "\017\027\027\032\012\036\032\041\022\044\010\045\005" +
    "\051\021\060\023\061\030\001\002\000\040\002\ufff2\004" +
    "\017\024\004\025\015\027\027\032\012\033\025\036\032" +
    "\041\022\044\010\045\005\047\024\051\021\060\023\061" +
    "\030\001\002\000\032\004\uffe2\012\uffe2\027\uffe2\032\uffe2" +
    "\033\uffe2\036\uffe2\041\uffe2\044\uffe2\045\uffe2\051\uffe2\060" +
    "\uffe2\061\uffe2\001\002\000\032\004\uffdc\012\uffdc\027\uffdc" +
    "\032\uffdc\033\uffdc\036\uffdc\041\uffdc\044\uffdc\045\uffdc\051" +
    "\uffdc\060\uffdc\061\uffdc\001\002\000\040\002\ufff3\004\017" +
    "\024\004\025\015\027\027\032\012\033\025\036\032\041" +
    "\022\044\010\045\005\047\024\051\021\060\023\061\030" +
    "\001\002\000\032\004\uffde\012\uffde\027\uffde\032\uffde\033" +
    "\uffde\036\uffde\041\uffde\044\uffde\045\uffde\051\uffde\060\uffde" +
    "\061\uffde\001\002\000\004\002\ufff6\001\002\000\004\002" +
    "\ufff5\001\002\000\030\004\017\027\027\032\012\033\025" +
    "\036\032\041\022\044\010\045\005\051\021\060\023\061" +
    "\030\001\002\000\006\014\037\016\040\001\002\000\004" +
    "\004\017\001\002\000\070\002\uffd3\004\uffd3\011\uffd3\014" +
    "\uffd3\016\uffd3\024\uffd3\025\uffd3\027\uffd3\030\uffd3\032\uffd3" +
    "\033\uffd3\034\uffd3\036\uffd3\040\uffd3\041\uffd3\042\uffd3\043" +
    "\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\051\uffd3\052\uffd3" +
    "\054\uffd3\057\uffd3\060\uffd3\061\uffd3\001\002\000\004\016" +
    "\042\001\002\000\070\002\uffd5\004\uffd5\011\uffd5\014\uffd5" +
    "\016\uffd5\024\uffd5\025\uffd5\027\uffd5\030\uffd5\032\uffd5\033" +
    "\uffd5\034\uffd5\036\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5" +
    "\044\uffd5\045\uffd5\046\uffd5\047\uffd5\051\uffd5\052\uffd5\054" +
    "\uffd5\057\uffd5\060\uffd5\061\uffd5\001\002\000\010\014\uffd0" +
    "\016\uffd0\100\046\001\002\000\006\014\037\016\uffd1\001" +
    "\002\000\004\016\uffd2\001\002\000\042\004\017\011\060" +
    "\050\050\062\073\063\055\064\063\065\062\066\067\067" +
    "\057\070\054\071\070\102\051\110\064\117\066\127\061" +
    "\130\065\001\002\000\054\010\uffa7\012\uffa7\014\uffa7\016" +
    "\uffa7\072\uffa7\073\uffa7\074\uffa7\075\uffa7\076\uffa7\077\uffa7" +
    "\101\uffa7\103\uffa7\104\uffa7\105\uffa7\106\uffa7\107\uffa7\110" +
    "\uffa7\115\uffa7\116\uffa7\117\uffa7\120\uffa7\001\002\000\004" +
    "\011\172\001\002\000\042\004\017\011\060\050\050\062" +
    "\073\063\055\064\063\065\062\066\067\067\057\070\054" +
    "\071\070\102\051\110\064\117\066\127\061\130\065\001" +
    "\002\000\050\014\uffcf\016\uffcf\072\110\073\107\074\105" +
    "\075\115\076\117\077\120\101\121\103\103\104\104\105" +
    "\113\106\102\107\111\110\112\115\114\116\106\117\101" +
    "\120\116\001\002\000\100\007\151\010\uff9c\011\162\012" +
    "\uff9c\013\uff9c\014\uff9c\016\uff9c\072\uff9c\073\uff9c\074\uff9c" +
    "\075\uff9c\076\uff9c\077\uff9c\100\uff9c\101\uff9c\103\uff9c\104" +
    "\uff9c\105\uff9c\106\uff9c\107\uff9c\110\uff9c\111\uff9c\112\uff9c" +
    "\113\uff9c\114\uff9c\115\uff9c\116\uff9c\117\uff9c\120\uff9c\127" +
    "\uff9c\130\uff9c\001\002\000\054\010\ufffa\012\ufffa\014\ufffa" +
    "\016\ufffa\072\ufffa\073\ufffa\074\ufffa\075\ufffa\076\ufffa\077" +
    "\ufffa\101\ufffa\103\ufffa\104\ufffa\105\ufffa\106\ufffa\107\ufffa" +
    "\110\ufffa\115\ufffa\116\ufffa\117\ufffa\120\ufffa\001\002\000" +
    "\054\010\uffff\012\uffff\014\uffff\016\uffff\072\uffff\073\uffff" +
    "\074\uffff\075\uffff\076\uffff\077\uffff\101\uffff\103\uffff\104" +
    "\uffff\105\uffff\106\uffff\107\uffff\110\uffff\115\uffff\116\uffff" +
    "\117\uffff\120\uffff\001\002\000\054\010\uffa9\012\uffa9\014" +
    "\uffa9\016\uffa9\072\uffa9\073\uffa9\074\uffa9\075\uffa9\076\uffa9" +
    "\077\uffa9\101\uffa9\103\uffa9\104\uffa9\105\uffa9\106\uffa9\107" +
    "\uffa9\110\uffa9\115\uffa9\116\uffa9\117\uffa9\120\uffa9\001\002" +
    "\000\054\010\ufffb\012\ufffb\014\ufffb\016\ufffb\072\ufffb\073" +
    "\ufffb\074\ufffb\075\ufffb\076\ufffb\077\ufffb\101\ufffb\103\ufffb" +
    "\104\ufffb\105\ufffb\106\ufffb\107\ufffb\110\ufffb\115\ufffb\116" +
    "\ufffb\117\ufffb\120\ufffb\001\002\000\042\004\017\011\060" +
    "\050\050\062\073\063\055\064\063\065\062\066\067\067" +
    "\057\070\054\071\070\102\051\110\064\117\066\127\061" +
    "\130\065\001\002\000\006\004\017\011\145\001\002\000" +
    "\054\010\ufffd\012\ufffd\014\ufffd\016\ufffd\072\ufffd\073\ufffd" +
    "\074\ufffd\075\ufffd\076\ufffd\077\ufffd\101\ufffd\103\ufffd\104" +
    "\ufffd\105\ufffd\106\ufffd\107\ufffd\110\ufffd\115\ufffd\116\ufffd" +
    "\117\ufffd\120\ufffd\001\002\000\054\010\ufffe\012\ufffe\014" +
    "\ufffe\016\ufffe\072\ufffe\073\ufffe\074\ufffe\075\ufffe\076\ufffe" +
    "\077\ufffe\101\ufffe\103\ufffe\104\ufffe\105\ufffe\106\ufffe\107" +
    "\ufffe\110\ufffe\115\ufffe\116\ufffe\117\ufffe\120\ufffe\001\002" +
    "\000\042\004\017\011\060\050\050\062\073\063\055\064" +
    "\063\065\062\066\067\067\057\070\054\071\070\102\051" +
    "\110\064\117\066\127\061\130\065\001\002\000\006\004" +
    "\017\011\145\001\002\000\042\004\017\011\060\050\050" +
    "\062\073\063\055\064\063\065\062\066\067\067\057\070" +
    "\054\071\070\102\051\110\064\117\066\127\061\130\065" +
    "\001\002\000\054\010\ufffc\012\ufffc\014\ufffc\016\ufffc\072" +
    "\ufffc\073\ufffc\074\ufffc\075\ufffc\076\ufffc\077\ufffc\101\ufffc" +
    "\103\ufffc\104\ufffc\105\ufffc\106\ufffc\107\ufffc\110\ufffc\115" +
    "\ufffc\116\ufffc\117\ufffc\120\ufffc\001\002\000\054\010\ufff9" +
    "\012\ufff9\014\ufff9\016\ufff9\072\ufff9\073\ufff9\074\ufff9\075" +
    "\ufff9\076\ufff9\077\ufff9\101\ufff9\103\ufff9\104\ufff9\105\ufff9" +
    "\106\ufff9\107\ufff9\110\ufff9\115\ufff9\116\ufff9\117\ufff9\120" +
    "\ufff9\001\002\000\062\010\uffa6\012\uffa6\013\076\014\uffa6" +
    "\016\uffa6\072\uffa6\073\uffa6\074\uffa6\075\uffa6\076\uffa6\077" +
    "\uffa6\101\uffa6\103\uffa6\104\uffa6\105\uffa6\106\uffa6\107\uffa6" +
    "\110\uffa6\115\uffa6\116\uffa6\117\uffa6\120\uffa6\127\074\130" +
    "\075\001\002\000\054\010\uffa5\012\uffa5\014\uffa5\016\uffa5" +
    "\072\uffa5\073\uffa5\074\uffa5\075\uffa5\076\uffa5\077\uffa5\101" +
    "\uffa5\103\uffa5\104\uffa5\105\uffa5\106\uffa5\107\uffa5\110\uffa5" +
    "\115\uffa5\116\uffa5\117\uffa5\120\uffa5\001\002\000\054\010" +
    "\ufff8\012\ufff8\014\ufff8\016\ufff8\072\ufff8\073\ufff8\074\ufff8" +
    "\075\ufff8\076\ufff8\077\ufff8\101\ufff8\103\ufff8\104\ufff8\105" +
    "\ufff8\106\ufff8\107\ufff8\110\ufff8\115\ufff8\116\ufff8\117\ufff8" +
    "\120\ufff8\001\002\000\054\010\uffa1\012\uffa1\014\uffa1\016" +
    "\uffa1\072\uffa1\073\uffa1\074\uffa1\075\uffa1\076\uffa1\077\uffa1" +
    "\101\uffa1\103\uffa1\104\uffa1\105\uffa1\106\uffa1\107\uffa1\110" +
    "\uffa1\115\uffa1\116\uffa1\117\uffa1\120\uffa1\001\002\000\054" +
    "\010\uffa3\012\uffa3\014\uffa3\016\uffa3\072\uffa3\073\uffa3\074" +
    "\uffa3\075\uffa3\076\uffa3\077\uffa3\101\uffa3\103\uffa3\104\uffa3" +
    "\105\uffa3\106\uffa3\107\uffa3\110\uffa3\115\uffa3\116\uffa3\117" +
    "\uffa3\120\uffa3\001\002\000\004\004\017\001\002\000\074" +
    "\010\uff9a\012\uff9a\013\uff9a\014\uff9a\016\uff9a\072\uff9a\073" +
    "\uff9a\074\uff9a\075\uff9a\076\uff9a\077\uff9a\100\uff9a\101\uff9a" +
    "\103\uff9a\104\uff9a\105\uff9a\106\uff9a\107\uff9a\110\uff9a\111" +
    "\uff9a\112\uff9a\113\uff9a\114\uff9a\115\uff9a\116\uff9a\117\uff9a" +
    "\120\uff9a\127\uff9a\130\uff9a\001\002\000\054\010\uff9e\012" +
    "\uff9e\014\uff9e\016\uff9e\072\uff9e\073\uff9e\074\uff9e\075\uff9e" +
    "\076\uff9e\077\uff9e\101\121\103\uff9e\104\uff9e\105\uff9e\106" +
    "\uff9e\107\uff9e\110\uff9e\115\uff9e\116\uff9e\117\uff9e\120\uff9e" +
    "\001\002\000\042\004\017\011\060\050\050\062\073\063" +
    "\055\064\063\065\062\066\067\067\057\070\054\071\070" +
    "\102\051\110\064\117\066\127\061\130\065\001\002\000" +
    "\042\004\017\011\060\050\050\062\073\063\055\064\063" +
    "\065\062\066\067\067\057\070\054\071\070\102\051\110" +
    "\064\117\066\127\061\130\065\001\002\000\042\004\017" +
    "\011\060\050\050\062\073\063\055\064\063\065\062\066" +
    "\067\067\057\070\054\071\070\102\051\110\064\117\066" +
    "\127\061\130\065\001\002\000\042\004\017\011\060\050" +
    "\050\062\073\063\055\064\063\065\062\066\067\067\057" +
    "\070\054\071\070\102\051\110\064\117\066\127\061\130" +
    "\065\001\002\000\042\004\017\011\060\050\050\062\073" +
    "\063\055\064\063\065\062\066\067\067\057\070\054\071" +
    "\070\102\051\110\064\117\066\127\061\130\065\001\002" +
    "\000\042\004\017\011\060\050\050\062\073\063\055\064" +
    "\063\065\062\066\067\067\057\070\054\071\070\102\051" +
    "\110\064\117\066\127\061\130\065\001\002\000\042\004" +
    "\017\011\060\050\050\062\073\063\055\064\063\065\062" +
    "\066\067\067\057\070\054\071\070\102\051\110\064\117" +
    "\066\127\061\130\065\001\002\000\042\004\017\011\060" +
    "\050\050\062\073\063\055\064\063\065\062\066\067\067" +
    "\057\070\054\071\070\102\051\110\064\117\066\127\061" +
    "\130\065\001\002\000\042\004\017\011\060\050\050\062" +
    "\073\063\055\064\063\065\062\066\067\067\057\070\054" +
    "\071\070\102\051\110\064\117\066\127\061\130\065\001" +
    "\002\000\042\004\017\011\060\050\050\062\073\063\055" +
    "\064\063\065\062\066\067\067\057\070\054\071\070\102" +
    "\051\110\064\117\066\127\061\130\065\001\002\000\042" +
    "\004\017\011\060\050\050\062\073\063\055\064\063\065" +
    "\062\066\067\067\057\070\054\071\070\102\051\110\064" +
    "\117\066\127\061\130\065\001\002\000\042\004\017\011" +
    "\060\050\050\062\073\063\055\064\063\065\062\066\067" +
    "\067\057\070\054\071\070\102\051\110\064\117\066\127" +
    "\061\130\065\001\002\000\042\004\017\011\060\050\050" +
    "\062\073\063\055\064\063\065\062\066\067\067\057\070" +
    "\054\071\070\102\051\110\064\117\066\127\061\130\065" +
    "\001\002\000\042\004\017\011\060\050\050\062\073\063" +
    "\055\064\063\065\062\066\067\067\057\070\054\071\070" +
    "\102\051\110\064\117\066\127\061\130\065\001\002\000" +
    "\042\004\017\011\060\050\050\062\073\063\055\064\063" +
    "\065\062\066\067\067\057\070\054\071\070\102\051\110" +
    "\064\117\066\127\061\130\065\001\002\000\042\004\017" +
    "\011\060\050\050\062\073\063\055\064\063\065\062\066" +
    "\067\067\057\070\054\071\070\102\051\110\064\117\066" +
    "\127\061\130\065\001\002\000\042\004\017\011\060\050" +
    "\050\062\073\063\055\064\063\065\062\066\067\067\057" +
    "\070\054\071\070\102\051\110\064\117\066\127\061\130" +
    "\065\001\002\000\054\010\uff88\012\uff88\014\uff88\016\uff88" +
    "\072\uff88\073\uff88\074\uff88\075\uff88\076\uff88\077\uff88\101" +
    "\121\103\uff88\104\uff88\105\uff88\106\uff88\107\uff88\110\uff88" +
    "\115\uff88\116\uff88\117\uff88\120\uff88\001\002\000\054\010" +
    "\uff8c\012\uff8c\014\uff8c\016\uff8c\072\uff8c\073\uff8c\074\uff8c" +
    "\075\uff8c\076\uff8c\077\uff8c\101\121\103\uff8c\104\uff8c\105" +
    "\uff8c\106\uff8c\107\111\110\112\115\114\116\106\117\101" +
    "\120\uff8c\001\002\000\054\010\uff8a\012\uff8a\014\uff8a\016" +
    "\uff8a\072\uff8a\073\uff8a\074\uff8a\075\uff8a\076\uff8a\077\uff8a" +
    "\101\121\103\uff8a\104\uff8a\105\uff8a\106\uff8a\107\111\110" +
    "\112\115\114\116\106\117\101\120\uff8a\001\002\000\054" +
    "\010\uff86\012\uff86\014\uff86\016\uff86\072\110\073\107\074" +
    "\105\075\115\076\117\077\120\101\121\103\103\104\104" +
    "\105\113\106\102\107\111\110\112\115\114\116\106\117" +
    "\101\120\uff86\001\002\000\054\010\uff89\012\uff89\014\uff89" +
    "\016\uff89\072\uff89\073\uff89\074\uff89\075\uff89\076\uff89\077" +
    "\uff89\101\121\103\uff89\104\uff89\105\uff89\106\uff89\107\111" +
    "\110\112\115\114\116\106\117\101\120\uff89\001\002\000" +
    "\054\010\uff93\012\uff93\014\uff93\016\uff93\072\uff93\073\uff93" +
    "\074\uff93\075\uff93\076\uff93\077\uff93\101\121\103\uff93\104" +
    "\uff93\105\uff93\106\uff93\107\uff93\110\uff93\115\uff93\116\uff93" +
    "\117\uff93\120\uff93\001\002\000\054\010\uff90\012\uff90\014" +
    "\uff90\016\uff90\072\110\073\107\074\105\075\115\076\117" +
    "\077\120\101\121\103\103\104\uff90\105\uff90\106\102\107" +
    "\111\110\112\115\114\116\106\117\101\120\uff90\001\002" +
    "\000\054\010\uff96\012\uff96\014\uff96\016\uff96\072\uff96\073" +
    "\uff96\074\uff96\075\uff96\076\uff96\077\uff96\101\121\103\uff96" +
    "\104\uff96\105\uff96\106\uff96\107\111\110\uff96\115\114\116" +
    "\106\117\uff96\120\uff96\001\002\000\054\010\uff94\012\uff94" +
    "\014\uff94\016\uff94\072\uff94\073\uff94\074\uff94\075\uff94\076" +
    "\uff94\077\uff94\101\121\103\uff94\104\uff94\105\uff94\106\uff94" +
    "\107\uff94\110\uff94\115\uff94\116\uff94\117\uff94\120\uff94\001" +
    "\002\000\054\010\uff8e\012\uff8e\014\uff8e\016\uff8e\072\uff8e" +
    "\073\uff8e\074\105\075\115\076\117\077\120\101\121\103" +
    "\uff8e\104\uff8e\105\uff8e\106\uff8e\107\111\110\112\115\114" +
    "\116\106\117\101\120\uff8e\001\002\000\054\010\uff8d\012" +
    "\uff8d\014\uff8d\016\uff8d\072\uff8d\073\uff8d\074\105\075\115" +
    "\076\117\077\120\101\121\103\uff8d\104\uff8d\105\uff8d\106" +
    "\uff8d\107\111\110\112\115\114\116\106\117\101\120\uff8d" +
    "\001\002\000\054\010\uff92\012\uff92\014\uff92\016\uff92\072" +
    "\uff92\073\uff92\074\uff92\075\uff92\076\uff92\077\uff92\101\121" +
    "\103\uff92\104\uff92\105\uff92\106\uff92\107\uff92\110\uff92\115" +
    "\uff92\116\uff92\117\uff92\120\uff92\001\002\000\054\010\uff8b" +
    "\012\uff8b\014\uff8b\016\uff8b\072\uff8b\073\uff8b\074\uff8b\075" +
    "\uff8b\076\uff8b\077\uff8b\101\121\103\uff8b\104\uff8b\105\uff8b" +
    "\106\uff8b\107\111\110\112\115\114\116\106\117\101\120" +
    "\uff8b\001\002\000\054\010\uff87\012\uff87\014\uff87\016\uff87" +
    "\072\110\073\107\074\105\075\115\076\117\077\120\101" +
    "\121\103\103\104\uff87\105\113\106\102\107\111\110\112" +
    "\115\114\116\106\117\101\120\uff87\001\002\000\054\010" +
    "\uff91\012\uff91\014\uff91\016\uff91\072\110\073\107\074\105" +
    "\075\115\076\117\077\120\101\121\103\uff91\104\uff91\105" +
    "\uff91\106\uff91\107\111\110\112\115\114\116\106\117\101" +
    "\120\uff91\001\002\000\054\010\uff8f\012\uff8f\014\uff8f\016" +
    "\uff8f\072\110\073\107\074\105\075\115\076\117\077\120" +
    "\101\121\103\103\104\uff8f\105\uff8f\106\uff8f\107\111\110" +
    "\112\115\114\116\106\117\101\120\uff8f\001\002\000\054" +
    "\010\uff95\012\uff95\014\uff95\016\uff95\072\uff95\073\uff95\074" +
    "\uff95\075\uff95\076\uff95\077\uff95\101\121\103\uff95\104\uff95" +
    "\105\uff95\106\uff95\107\111\110\uff95\115\114\116\106\117" +
    "\uff95\120\uff95\001\002\000\072\007\151\010\uff9c\012\uff9c" +
    "\013\uff9c\014\uff9c\016\uff9c\072\uff9c\073\uff9c\074\uff9c\075" +
    "\uff9c\076\uff9c\077\uff9c\100\uff9c\101\uff9c\103\uff9c\104\uff9c" +
    "\105\uff9c\106\uff9c\107\uff9c\110\uff9c\111\uff9c\112\uff9c\113" +
    "\uff9c\114\uff9c\115\uff9c\116\uff9c\117\uff9c\120\uff9c\001\002" +
    "\000\056\010\uffa4\012\uffa4\013\076\014\uffa4\016\uffa4\072" +
    "\uffa4\073\uffa4\074\uffa4\075\uffa4\076\uffa4\077\uffa4\101\uffa4" +
    "\103\uffa4\104\uffa4\105\uffa4\106\uffa4\107\uffa4\110\uffa4\115" +
    "\uffa4\116\uffa4\117\uffa4\120\uffa4\001\002\000\006\004\017" +
    "\011\145\001\002\000\006\012\147\013\076\001\002\000" +
    "\074\010\uff99\012\uff99\013\uff99\014\uff99\016\uff99\072\uff99" +
    "\073\uff99\074\uff99\075\uff99\076\uff99\077\uff99\100\uff99\101" +
    "\uff99\103\uff99\104\uff99\105\uff99\106\uff99\107\uff99\110\uff99" +
    "\111\uff99\112\uff99\113\uff99\114\uff99\115\uff99\116\uff99\117" +
    "\uff99\120\uff99\127\uff99\130\uff99\001\002\000\074\010\uff9b" +
    "\012\uff9b\013\uff9b\014\uff9b\016\uff9b\072\uff9b\073\uff9b\074" +
    "\uff9b\075\uff9b\076\uff9b\077\uff9b\100\uff9b\101\uff9b\103\uff9b" +
    "\104\uff9b\105\uff9b\106\uff9b\107\uff9b\110\uff9b\111\uff9b\112" +
    "\uff9b\113\uff9b\114\uff9b\115\uff9b\116\uff9b\117\uff9b\120\uff9b" +
    "\127\uff9b\130\uff9b\001\002\000\042\004\017\011\060\050" +
    "\050\062\073\063\055\064\063\065\062\066\067\067\057" +
    "\070\054\071\070\102\051\110\064\117\066\127\061\130" +
    "\065\001\002\000\046\010\153\072\110\073\107\074\105" +
    "\075\115\076\117\077\120\101\121\103\103\104\104\105" +
    "\113\106\102\107\111\110\112\115\114\116\106\117\101" +
    "\120\116\001\002\000\076\007\151\010\uff98\012\uff98\013" +
    "\uff98\014\uff98\016\uff98\072\uff98\073\uff98\074\uff98\075\uff98" +
    "\076\uff98\077\uff98\100\uff98\101\uff98\103\uff98\104\uff98\105" +
    "\uff98\106\uff98\107\uff98\110\uff98\111\uff98\112\uff98\113\uff98" +
    "\114\uff98\115\uff98\116\uff98\117\uff98\120\uff98\127\uff98\130" +
    "\uff98\001\002\000\074\010\uff97\012\uff97\013\uff97\014\uff97" +
    "\016\uff97\072\uff97\073\uff97\074\uff97\075\uff97\076\uff97\077" +
    "\uff97\100\uff97\101\uff97\103\uff97\104\uff97\105\uff97\106\uff97" +
    "\107\uff97\110\uff97\111\uff97\112\uff97\113\uff97\114\uff97\115" +
    "\uff97\116\uff97\117\uff97\120\uff97\127\uff97\130\uff97\001\002" +
    "\000\054\010\uff9d\012\uff9d\014\uff9d\016\uff9d\072\uff9d\073" +
    "\uff9d\074\uff9d\075\uff9d\076\uff9d\077\uff9d\101\121\103\uff9d" +
    "\104\uff9d\105\uff9d\106\uff9d\107\uff9d\110\uff9d\115\uff9d\116" +
    "\uff9d\117\uff9d\120\uff9d\001\002\000\056\010\uffa2\012\uffa2" +
    "\013\076\014\uffa2\016\uffa2\072\uffa2\073\uffa2\074\uffa2\075" +
    "\uffa2\076\uffa2\077\uffa2\101\uffa2\103\uffa2\104\uffa2\105\uffa2" +
    "\106\uffa2\107\uffa2\110\uffa2\115\uffa2\116\uffa2\117\uffa2\120" +
    "\uffa2\001\002\000\046\012\161\072\110\073\107\074\105" +
    "\075\115\076\117\077\120\101\121\103\103\104\104\105" +
    "\113\106\102\107\111\110\112\115\114\116\106\117\101" +
    "\120\116\001\002\000\054\012\147\013\076\072\uffa6\073" +
    "\uffa6\074\uffa6\075\uffa6\076\uffa6\077\uffa6\101\uffa6\103\uffa6" +
    "\104\uffa6\105\uffa6\106\uffa6\107\uffa6\110\uffa6\115\uffa6\116" +
    "\uffa6\117\uffa6\120\uffa6\127\074\130\075\001\002\000\054" +
    "\010\uffa8\012\uffa8\014\uffa8\016\uffa8\072\uffa8\073\uffa8\074" +
    "\uffa8\075\uffa8\076\uffa8\077\uffa8\101\uffa8\103\uffa8\104\uffa8" +
    "\105\uffa8\106\uffa8\107\uffa8\110\uffa8\115\uffa8\116\uffa8\117" +
    "\uffa8\120\uffa8\001\002\000\044\004\017\011\060\012\164" +
    "\050\050\062\073\063\055\064\063\065\062\066\067\067" +
    "\057\070\054\071\070\102\051\110\064\117\066\127\061" +
    "\130\065\001\002\000\050\012\uffb9\014\167\072\110\073" +
    "\107\074\105\075\115\076\117\077\120\101\121\103\103" +
    "\104\104\105\113\106\102\107\111\110\112\115\114\116" +
    "\106\117\101\120\116\001\002\000\054\010\uffba\012\uffba" +
    "\014\uffba\016\uffba\072\uffba\073\uffba\074\uffba\075\uffba\076" +
    "\uffba\077\uffba\101\uffba\103\uffba\104\uffba\105\uffba\106\uffba" +
    "\107\uffba\110\uffba\115\uffba\116\uffba\117\uffba\120\uffba\001" +
    "\002\000\004\012\166\001\002\000\054\010\uffbb\012\uffbb" +
    "\014\uffbb\016\uffbb\072\uffbb\073\uffbb\074\uffbb\075\uffbb\076" +
    "\uffbb\077\uffbb\101\uffbb\103\uffbb\104\uffbb\105\uffbb\106\uffbb" +
    "\107\uffbb\110\uffbb\115\uffbb\116\uffbb\117\uffbb\120\uffbb\001" +
    "\002\000\042\004\017\011\060\050\050\062\073\063\055" +
    "\064\063\065\062\066\067\067\057\070\054\071\070\102" +
    "\051\110\064\117\066\127\061\130\065\001\002\000\004" +
    "\012\uffb8\001\002\000\054\010\uffa0\012\uffa0\014\uffa0\016" +
    "\uffa0\072\uffa0\073\uffa0\074\uffa0\075\uffa0\076\uffa0\077\uffa0" +
    "\101\121\103\uffa0\104\uffa0\105\uffa0\106\uffa0\107\uffa0\110" +
    "\uffa0\115\uffa0\116\uffa0\117\uffa0\120\uffa0\001\002\000\026" +
    "\004\017\027\027\032\012\036\032\041\022\044\010\045" +
    "\005\051\021\060\023\061\030\001\002\000\004\012\174" +
    "\001\002\000\054\010\uff9f\012\uff9f\014\uff9f\016\uff9f\072" +
    "\uff9f\073\uff9f\074\uff9f\075\uff9f\076\uff9f\077\uff9f\101\uff9f" +
    "\103\uff9f\104\uff9f\105\uff9f\106\uff9f\107\uff9f\110\uff9f\115" +
    "\uff9f\116\uff9f\117\uff9f\120\uff9f\001\002\000\004\026\176" +
    "\001\002\000\030\004\017\027\027\032\012\033\025\036" +
    "\032\041\022\044\010\045\005\051\021\060\023\061\030" +
    "\001\002\000\004\040\202\001\002\000\032\004\017\027" +
    "\027\032\012\033\025\036\032\040\uffd8\041\022\044\010" +
    "\045\005\051\021\060\023\061\030\001\002\000\004\040" +
    "\uffd7\001\002\000\004\047\203\001\002\000\040\002\uffd9" +
    "\004\uffd9\024\uffd9\025\uffd9\027\uffd9\032\uffd9\033\uffd9\036" +
    "\uffd9\041\uffd9\044\uffd9\045\uffd9\047\uffd9\051\uffd9\060\uffd9" +
    "\061\uffd9\001\002\000\004\002\001\001\002\000\004\004" +
    "\017\001\002\000\004\011\207\001\002\000\030\004\017" +
    "\012\212\027\027\032\012\036\032\041\022\044\010\045" +
    "\005\051\021\060\023\061\030\001\002\000\004\012\370" +
    "\001\002\000\004\004\017\001\002\000\006\016\213\026" +
    "\214\001\002\000\040\002\uffed\004\uffed\024\uffed\025\uffed" +
    "\027\uffed\032\uffed\033\uffed\036\uffed\041\uffed\044\uffed\045" +
    "\uffed\047\uffed\051\uffed\060\uffed\061\uffed\001\002\000\054" +
    "\004\017\011\145\027\027\030\231\032\012\033\025\034" +
    "\217\036\032\040\223\041\022\042\235\043\225\044\010" +
    "\045\005\046\222\051\021\052\224\054\230\057\236\060" +
    "\023\061\030\001\002\000\040\002\uffeb\004\uffeb\024\uffeb" +
    "\025\uffeb\027\uffeb\032\uffeb\033\uffeb\036\uffeb\041\uffeb\044" +
    "\uffeb\045\uffeb\047\uffeb\051\uffeb\060\uffeb\061\uffeb\001\002" +
    "\000\004\016\356\001\002\000\004\016\355\001\002\000" +
    "\054\004\017\011\145\027\027\030\231\032\012\033\025" +
    "\034\217\036\032\040\uffc9\041\022\042\235\043\225\044" +
    "\010\045\005\046\222\051\021\052\224\054\230\057\236" +
    "\060\023\061\030\001\002\000\024\004\uffda\007\151\011" +
    "\162\013\uff9c\100\uff9c\111\uff9c\112\uff9c\113\uff9c\114\uff9c" +
    "\001\002\000\044\004\017\011\060\016\351\050\050\062" +
    "\073\063\055\064\063\065\062\066\067\067\057\070\054" +
    "\071\070\102\051\110\064\117\066\127\061\130\065\001" +
    "\002\000\074\002\uffcd\004\uffcd\011\uffcd\024\uffcd\025\uffcd" +
    "\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035" +
    "\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd" +
    "\044\uffcd\045\uffcd\046\uffcd\047\uffcd\051\uffcd\052\uffcd\054" +
    "\uffcd\055\uffcd\057\uffcd\060\uffcd\061\uffcd\001\002\000\004" +
    "\011\325\001\002\000\004\011\317\001\002\000\054\004" +
    "\uffc5\011\uffc5\027\uffc5\030\uffc5\032\uffc5\033\uffc5\034\uffc5" +
    "\036\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045" +
    "\uffc5\046\uffc5\051\uffc5\052\uffc5\054\uffc5\057\uffc5\060\uffc5" +
    "\061\uffc5\001\002\000\004\040\316\001\002\000\004\011" +
    "\310\001\002\000\004\016\307\001\002\000\004\016\306" +
    "\001\002\000\016\013\076\100\266\111\263\112\265\113" +
    "\264\114\262\001\002\000\054\004\uffc6\011\uffc6\027\uffc6" +
    "\030\uffc6\032\uffc6\033\uffc6\034\uffc6\036\uffc6\040\uffc6\041" +
    "\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6\051\uffc6" +
    "\052\uffc6\054\uffc6\057\uffc6\060\uffc6\061\uffc6\001\002\000" +
    "\004\011\247\001\002\000\004\026\214\001\002\000\054" +
    "\004\017\011\145\027\027\030\231\032\012\033\025\034" +
    "\217\036\032\040\uffca\041\022\042\235\043\225\044\010" +
    "\045\005\046\222\051\021\052\224\054\230\057\236\060" +
    "\023\061\030\001\002\000\004\040\uffcc\001\002\000\004" +
    "\055\242\001\002\000\004\011\243\001\002\000\042\004" +
    "\017\011\060\050\050\062\073\063\055\064\063\065\062" +
    "\066\067\067\057\070\054\071\070\102\051\110\064\117" +
    "\066\127\061\130\065\001\002\000\046\012\245\072\110" +
    "\073\107\074\105\075\115\076\117\077\120\101\121\103" +
    "\103\104\104\105\113\106\102\107\111\110\112\115\114" +
    "\116\106\117\101\120\116\001\002\000\004\016\246\001" +
    "\002\000\054\004\uffad\011\uffad\027\uffad\030\uffad\032\uffad" +
    "\033\uffad\034\uffad\036\uffad\040\uffad\041\uffad\042\uffad\043" +
    "\uffad\044\uffad\045\uffad\046\uffad\051\uffad\052\uffad\054\uffad" +
    "\057\uffad\060\uffad\061\uffad\001\002\000\010\004\017\011" +
    "\145\016\250\001\002\000\042\004\017\011\060\050\050" +
    "\062\073\063\055\064\063\065\062\066\067\067\057\070" +
    "\054\071\070\102\051\110\064\117\066\127\061\130\065" +
    "\001\002\000\004\016\252\001\002\000\042\004\017\011" +
    "\060\050\050\062\073\063\055\064\063\065\062\066\067" +
    "\067\057\070\054\071\070\102\051\110\064\117\066\127" +
    "\061\130\065\001\002\000\046\016\254\072\110\073\107" +
    "\074\105\075\115\076\117\077\120\101\121\103\103\104" +
    "\104\105\113\106\102\107\111\110\112\115\114\116\106" +
    "\117\101\120\116\001\002\000\044\004\017\011\060\012" +
    "\256\050\050\062\073\063\055\064\063\065\062\066\067" +
    "\067\057\070\054\071\070\102\051\110\064\117\066\127" +
    "\061\130\065\001\002\000\046\012\uffab\072\110\073\107" +
    "\074\105\075\115\076\117\077\120\101\121\103\103\104" +
    "\104\105\113\106\102\107\111\110\112\115\114\116\106" +
    "\117\101\120\116\001\002\000\004\026\214\001\002\000" +
    "\004\012\274\001\002\000\004\012\uffaa\001\002\000\066" +
    "\012\uffa6\013\076\072\uffa6\073\uffa6\074\uffa6\075\uffa6\076" +
    "\uffa6\077\uffa6\100\266\101\uffa6\103\uffa6\104\uffa6\105\uffa6" +
    "\106\uffa6\107\uffa6\110\uffa6\111\263\112\265\113\264\114" +
    "\262\115\uffa6\116\uffa6\117\uffa6\120\uffa6\127\074\130\075" +
    "\001\002\000\042\004\017\011\060\050\050\062\073\063" +
    "\055\064\063\065\062\066\067\067\057\070\054\071\070" +
    "\102\051\110\064\117\066\127\061\130\065\001\002\000" +
    "\042\004\017\011\060\050\050\062\073\063\055\064\063" +
    "\065\062\066\067\067\057\070\054\071\070\102\051\110" +
    "\064\117\066\127\061\130\065\001\002\000\042\004\017" +
    "\011\060\050\050\062\073\063\055\064\063\065\062\066" +
    "\067\067\057\070\054\071\070\102\051\110\064\117\066" +
    "\127\061\130\065\001\002\000\042\004\017\011\060\050" +
    "\050\062\073\063\055\064\063\065\062\066\067\067\057" +
    "\070\054\071\070\102\051\110\064\117\066\127\061\130" +
    "\065\001\002\000\042\004\017\011\060\050\050\062\073" +
    "\063\055\064\063\065\062\066\067\067\057\070\054\071" +
    "\070\102\051\110\064\117\066\127\061\130\065\001\002" +
    "\000\050\012\uffc0\016\uffc0\072\110\073\107\074\105\075" +
    "\115\076\117\077\120\101\121\103\103\104\104\105\113" +
    "\106\102\107\111\110\112\115\114\116\106\117\101\120" +
    "\116\001\002\000\050\012\uffbe\016\uffbe\072\110\073\107" +
    "\074\105\075\115\076\117\077\120\101\121\103\103\104" +
    "\104\105\113\106\102\107\111\110\112\115\114\116\106" +
    "\117\101\120\116\001\002\000\050\012\uffbd\016\uffbd\072" +
    "\110\073\107\074\105\075\115\076\117\077\120\101\121" +
    "\103\103\104\104\105\113\106\102\107\111\110\112\115" +
    "\114\116\106\117\101\120\116\001\002\000\050\012\uffbf" +
    "\016\uffbf\072\110\073\107\074\105\075\115\076\117\077" +
    "\120\101\121\103\103\104\104\105\113\106\102\107\111" +
    "\110\112\115\114\116\106\117\101\120\116\001\002\000" +
    "\050\012\uffbc\016\uffbc\072\110\073\107\074\105\075\115" +
    "\076\117\077\120\101\121\103\103\104\104\105\113\106" +
    "\102\107\111\110\112\115\114\116\106\117\101\120\116" +
    "\001\002\000\004\026\214\001\002\000\054\004\uffb1\011" +
    "\uffb1\027\uffb1\030\uffb1\032\uffb1\033\uffb1\034\uffb1\036\uffb1" +
    "\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1\046" +
    "\uffb1\051\uffb1\052\uffb1\054\uffb1\057\uffb1\060\uffb1\061\uffb1" +
    "\001\002\000\054\004\uffaf\011\uffaf\027\uffaf\030\uffaf\032" +
    "\uffaf\033\uffaf\034\uffaf\036\uffaf\040\uffaf\041\uffaf\042\uffaf" +
    "\043\uffaf\044\uffaf\045\uffaf\046\uffaf\051\uffaf\052\uffaf\054" +
    "\uffaf\057\uffaf\060\uffaf\061\uffaf\001\002\000\046\016\300" +
    "\072\110\073\107\074\105\075\115\076\117\077\120\101" +
    "\121\103\103\104\104\105\113\106\102\107\111\110\112" +
    "\115\114\116\106\117\101\120\116\001\002\000\044\004" +
    "\017\011\060\012\301\050\050\062\073\063\055\064\063" +
    "\065\062\066\067\067\057\070\054\071\070\102\051\110" +
    "\064\117\066\127\061\130\065\001\002\000\004\026\214" +
    "\001\002\000\004\012\303\001\002\000\004\026\214\001" +
    "\002\000\054\004\uffb0\011\uffb0\027\uffb0\030\uffb0\032\uffb0" +
    "\033\uffb0\034\uffb0\036\uffb0\040\uffb0\041\uffb0\042\uffb0\043" +
    "\uffb0\044\uffb0\045\uffb0\046\uffb0\051\uffb0\052\uffb0\054\uffb0" +
    "\057\uffb0\060\uffb0\061\uffb0\001\002\000\054\004\uffae\011" +
    "\uffae\027\uffae\030\uffae\032\uffae\033\uffae\034\uffae\036\uffae" +
    "\040\uffae\041\uffae\042\uffae\043\uffae\044\uffae\045\uffae\046" +
    "\uffae\051\uffae\052\uffae\054\uffae\057\uffae\060\uffae\061\uffae" +
    "\001\002\000\054\004\uffc8\011\uffc8\027\uffc8\030\uffc8\032" +
    "\uffc8\033\uffc8\034\uffc8\036\uffc8\040\uffc8\041\uffc8\042\uffc8" +
    "\043\uffc8\044\uffc8\045\uffc8\046\uffc8\051\uffc8\052\uffc8\054" +
    "\uffc8\057\uffc8\060\uffc8\061\uffc8\001\002\000\054\004\uffc2" +
    "\011\uffc2\027\uffc2\030\uffc2\032\uffc2\033\uffc2\034\uffc2\036" +
    "\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2" +
    "\046\uffc2\051\uffc2\052\uffc2\054\uffc2\057\uffc2\060\uffc2\061" +
    "\uffc2\001\002\000\004\004\017\001\002\000\004\056\312" +
    "\001\002\000\004\004\017\001\002\000\004\012\314\001" +
    "\002\000\004\026\214\001\002\000\054\004\uffac\011\uffac" +
    "\027\uffac\030\uffac\032\uffac\033\uffac\034\uffac\036\uffac\040" +
    "\uffac\041\uffac\042\uffac\043\uffac\044\uffac\045\uffac\046\uffac" +
    "\051\uffac\052\uffac\054\uffac\057\uffac\060\uffac\061\uffac\001" +
    "\002\000\074\002\uffce\004\uffce\011\uffce\024\uffce\025\uffce" +
    "\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035" +
    "\uffce\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce\043\uffce" +
    "\044\uffce\045\uffce\046\uffce\047\uffce\051\uffce\052\uffce\054" +
    "\uffce\055\uffce\057\uffce\060\uffce\061\uffce\001\002\000\042" +
    "\004\017\011\060\050\050\062\073\063\055\064\063\065" +
    "\062\066\067\067\057\070\054\071\070\102\051\110\064" +
    "\117\066\127\061\130\065\001\002\000\046\012\321\072" +
    "\110\073\107\074\105\075\115\076\117\077\120\101\121" +
    "\103\103\104\104\105\113\106\102\107\111\110\112\115" +
    "\114\116\106\117\101\120\116\001\002\000\004\026\214" +
    "\001\002\000\056\004\uffb7\011\uffb7\027\uffb7\030\uffb7\032" +
    "\uffb7\033\uffb7\034\uffb7\036\uffb7\037\323\040\uffb7\041\uffb7" +
    "\042\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7\051\uffb7\052" +
    "\uffb7\054\uffb7\057\uffb7\060\uffb7\061\uffb7\001\002\000\004" +
    "\026\214\001\002\000\054\004\uffb6\011\uffb6\027\uffb6\030" +
    "\uffb6\032\uffb6\033\uffb6\034\uffb6\036\uffb6\040\uffb6\041\uffb6" +
    "\042\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6\051\uffb6\052" +
    "\uffb6\054\uffb6\057\uffb6\060\uffb6\061\uffb6\001\002\000\004" +
    "\004\017\001\002\000\004\012\327\001\002\000\004\053" +
    "\330\001\002\000\004\015\331\001\002\000\004\026\332" +
    "\001\002\000\006\031\335\035\333\001\002\000\004\015" +
    "\346\001\002\000\004\035\342\001\002\000\004\063\336" +
    "\001\002\000\004\015\337\001\002\000\004\026\214\001" +
    "\002\000\006\031\335\035\uffb3\001\002\000\004\035\uffb2" +
    "\001\002\000\004\015\343\001\002\000\004\026\214\001" +
    "\002\000\004\040\345\001\002\000\054\004\uffb4\011\uffb4" +
    "\027\uffb4\030\uffb4\032\uffb4\033\uffb4\034\uffb4\036\uffb4\040" +
    "\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4\046\uffb4" +
    "\051\uffb4\052\uffb4\054\uffb4\057\uffb4\060\uffb4\061\uffb4\001" +
    "\002\000\004\026\214\001\002\000\004\040\350\001\002" +
    "\000\054\004\uffb5\011\uffb5\027\uffb5\030\uffb5\032\uffb5\033" +
    "\uffb5\034\uffb5\036\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5" +
    "\044\uffb5\045\uffb5\046\uffb5\051\uffb5\052\uffb5\054\uffb5\057" +
    "\uffb5\060\uffb5\061\uffb5\001\002\000\054\004\uffc3\011\uffc3" +
    "\027\uffc3\030\uffc3\032\uffc3\033\uffc3\034\uffc3\036\uffc3\040" +
    "\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3" +
    "\051\uffc3\052\uffc3\054\uffc3\057\uffc3\060\uffc3\061\uffc3\001" +
    "\002\000\046\016\353\072\110\073\107\074\105\075\115" +
    "\076\117\077\120\101\121\103\103\104\104\105\113\106" +
    "\102\107\111\110\112\115\114\116\106\117\101\120\116" +
    "\001\002\000\054\004\uffc4\011\uffc4\027\uffc4\030\uffc4\032" +
    "\uffc4\033\uffc4\034\uffc4\036\uffc4\040\uffc4\041\uffc4\042\uffc4" +
    "\043\uffc4\044\uffc4\045\uffc4\046\uffc4\051\uffc4\052\uffc4\054" +
    "\uffc4\057\uffc4\060\uffc4\061\uffc4\001\002\000\004\040\uffcb" +
    "\001\002\000\054\004\uffc1\011\uffc1\027\uffc1\030\uffc1\032" +
    "\uffc1\033\uffc1\034\uffc1\036\uffc1\040\uffc1\041\uffc1\042\uffc1" +
    "\043\uffc1\044\uffc1\045\uffc1\046\uffc1\051\uffc1\052\uffc1\054" +
    "\uffc1\057\uffc1\060\uffc1\061\uffc1\001\002\000\054\004\uffc7" +
    "\011\uffc7\027\uffc7\030\uffc7\032\uffc7\033\uffc7\034\uffc7\036" +
    "\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7" +
    "\046\uffc7\051\uffc7\052\uffc7\054\uffc7\057\uffc7\060\uffc7\061" +
    "\uffc7\001\002\000\010\007\362\012\uffe9\014\361\001\002" +
    "\000\006\012\uffe8\014\366\001\002\000\026\004\017\027" +
    "\027\032\012\036\032\041\022\044\010\045\005\051\021" +
    "\060\023\061\030\001\002\000\004\010\363\001\002\000" +
    "\010\007\362\012\uffe5\014\uffe5\001\002\000\006\012\uffe4" +
    "\014\uffe4\001\002\000\004\012\uffe7\001\002\000\026\004" +
    "\017\027\027\032\012\036\032\041\022\044\010\045\005" +
    "\051\021\060\023\061\030\001\002\000\004\012\uffe6\001" +
    "\002\000\006\016\371\026\214\001\002\000\040\002\uffee" +
    "\004\uffee\024\uffee\025\uffee\027\uffee\032\uffee\033\uffee\036" +
    "\uffee\041\uffee\044\uffee\045\uffee\047\uffee\051\uffee\060\uffee" +
    "\061\uffee\001\002\000\040\002\uffec\004\uffec\024\uffec\025" +
    "\uffec\027\uffec\032\uffec\033\uffec\036\uffec\041\uffec\044\uffec" +
    "\045\uffec\047\uffec\051\uffec\060\uffec\061\uffec\001\002\000" +
    "\006\014\037\016\374\001\002\000\070\002\uffd4\004\uffd4" +
    "\011\uffd4\014\uffd4\016\uffd4\024\uffd4\025\uffd4\027\uffd4\030" +
    "\uffd4\032\uffd4\033\uffd4\034\uffd4\036\uffd4\040\uffd4\041\uffd4" +
    "\042\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\051" +
    "\uffd4\052\uffd4\054\uffd4\057\uffd4\060\uffd4\061\uffd4\001\002" +
    "\000\004\016\376\001\002\000\070\002\uffd6\004\uffd6\011" +
    "\uffd6\014\uffd6\016\uffd6\024\uffd6\025\uffd6\027\uffd6\030\uffd6" +
    "\032\uffd6\033\uffd6\034\uffd6\036\uffd6\040\uffd6\041\uffd6\042" +
    "\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6\047\uffd6\051\uffd6" +
    "\052\uffd6\054\uffd6\057\uffd6\060\uffd6\061\uffd6\001\002\000" +
    "\004\002\ufff4\001\002\000\004\004\017\001\002\000\040" +
    "\002\uffea\004\uffea\024\uffea\025\uffea\027\uffea\032\uffea\033" +
    "\uffea\036\uffea\041\uffea\044\uffea\045\uffea\047\uffea\051\uffea" +
    "\060\uffea\061\uffea\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\377\000\024\002\015\003\017\004\030\005\025\006" +
    "\005\007\013\010\010\011\012\034\006\001\001\000\006" +
    "\011\377\034\006\001\001\000\002\001\001\000\024\002" +
    "\376\003\017\004\030\005\025\006\005\007\013\010\010" +
    "\011\012\034\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\014\372" +
    "\034\042\001\001\000\002\001\001\000\006\011\204\034" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\034\174\001\001\000\006\011\034\034\006" +
    "\001\001\000\024\002\033\003\017\004\030\005\025\006" +
    "\005\007\013\010\010\011\012\034\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\002\032\003\017\004" +
    "\030\005\025\006\005\007\013\010\010\011\012\034\006" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\035\011\012\034\006\001\001\000\004" +
    "\030\040\001\001\000\006\014\043\034\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\030\044\001\001\000\002\001\001\000" +
    "\016\015\070\016\051\021\046\025\071\034\052\035\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\015" +
    "\070\016\170\021\046\025\071\034\052\035\055\001\001" +
    "\000\002\001\001\000\004\033\147\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\015\157\016\156\021\046\025\071\034\052\035" +
    "\055\001\001\000\006\015\155\034\142\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\015\070\016\154\021" +
    "\046\025\071\034\052\035\055\001\001\000\006\015\143" +
    "\034\142\001\001\000\016\015\070\016\077\021\046\025" +
    "\071\034\052\035\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\034\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\015" +
    "\070\016\141\021\046\025\071\034\052\035\055\001\001" +
    "\000\016\015\070\016\140\021\046\025\071\034\052\035" +
    "\055\001\001\000\016\015\070\016\137\021\046\025\071" +
    "\034\052\035\055\001\001\000\016\015\070\016\136\021" +
    "\046\025\071\034\052\035\055\001\001\000\016\015\070" +
    "\016\135\021\046\025\071\034\052\035\055\001\001\000" +
    "\016\015\070\016\134\021\046\025\071\034\052\035\055" +
    "\001\001\000\016\015\070\016\133\021\046\025\071\034" +
    "\052\035\055\001\001\000\016\015\070\016\132\021\046" +
    "\025\071\034\052\035\055\001\001\000\016\015\070\016" +
    "\131\021\046\025\071\034\052\035\055\001\001\000\016" +
    "\015\070\016\130\021\046\025\071\034\052\035\055\001" +
    "\001\000\016\015\070\016\127\021\046\025\071\034\052" +
    "\035\055\001\001\000\016\015\070\016\126\021\046\025" +
    "\071\034\052\035\055\001\001\000\016\015\070\016\125" +
    "\021\046\025\071\034\052\035\055\001\001\000\016\015" +
    "\070\016\124\021\046\025\071\034\052\035\055\001\001" +
    "\000\016\015\070\016\123\021\046\025\071\034\052\035" +
    "\055\001\001\000\016\015\070\016\122\021\046\025\071" +
    "\034\052\035\055\001\001\000\016\015\070\016\121\021" +
    "\046\025\071\034\052\035\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\147\001\001\000\002\001\001\000\006\015\145" +
    "\034\142\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\015\070\016\151\021\046\025\071" +
    "\034\052\035\055\001\001\000\002\001\001\000\004\033" +
    "\153\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\015\070\016\162\021\046\024\164\025\071" +
    "\034\052\035\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\015\070" +
    "\016\162\021\046\024\167\025\071\034\052\035\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\172" +
    "\034\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\004\177\011\012\027\176\034\006" +
    "\001\001\000\002\001\001\000\012\004\177\011\012\027" +
    "\200\034\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\034\205\001" +
    "\001\000\002\001\001\000\010\011\210\012\207\034\006" +
    "\001\001\000\002\001\001\000\004\034\356\001\001\000" +
    "\004\013\214\001\001\000\002\001\001\000\026\004\236" +
    "\011\012\015\232\017\217\020\231\021\215\022\233\023" +
    "\225\031\226\034\220\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\004\236\011\012\015" +
    "\232\017\217\020\231\021\215\022\233\023\225\031\353" +
    "\034\220\001\001\000\004\033\147\001\001\000\016\015" +
    "\070\016\351\021\046\025\071\034\052\035\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\240\001\001\000\026" +
    "\004\236\011\012\015\232\017\217\020\231\021\215\022" +
    "\233\023\225\031\237\034\220\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\015\070\016" +
    "\243\021\046\025\071\034\052\035\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\015" +
    "\232\020\250\034\142\001\001\000\016\015\070\016\276" +
    "\021\046\025\071\034\052\035\055\001\001\000\002\001" +
    "\001\000\016\015\070\016\252\021\046\025\071\034\052" +
    "\035\055\001\001\000\002\001\001\000\022\015\260\016" +
    "\254\020\257\021\046\025\071\034\052\035\055\036\256" +
    "\001\001\000\002\001\001\000\004\013\275\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\015\070\016\272\021\046\025\071\034\052\035\055\001" +
    "\001\000\016\015\070\016\271\021\046\025\071\034\052" +
    "\035\055\001\001\000\016\015\070\016\270\021\046\025" +
    "\071\034\052\035\055\001\001\000\016\015\070\016\267" +
    "\021\046\025\071\034\052\035\055\001\001\000\016\015" +
    "\070\016\266\021\046\025\071\034\052\035\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\274\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\015\260\016\254\020\257\021\046\025\071\034\052" +
    "\035\055\036\301\001\001\000\004\013\304\001\001\000" +
    "\002\001\001\000\004\013\303\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\034\310\001\001\000\002\001\001\000\004\034\312" +
    "\001\001\000\002\001\001\000\004\013\314\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\015\070\016\317" +
    "\021\046\025\071\034\052\035\055\001\001\000\002\001" +
    "\001\000\004\013\321\001\001\000\002\001\001\000\004" +
    "\013\323\001\001\000\002\001\001\000\004\034\325\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\333\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\337\001\001\000\004\032\340\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\343\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\346\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\357\001\001" +
    "\000\002\001\001\000\010\011\210\012\364\034\006\001" +
    "\001\000\002\001\001\000\004\026\363\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\011\210\012\366\034" +
    "\006\001\001\000\002\001\001\000\004\013\371\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\374\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\034\u0100\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    protected Program root;

    void setRoot(Program p) { this.root = p; }

    public Program getRoot() { return this.root; }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode start_val = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // identifier ::= ID 
            {
              ASTNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IdentifierNode(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // const_val ::= INTCONST 
            {
              ASTNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IntegerLiteralNode(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_val",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // const_val ::= REALCONST 
            {
              ASTNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double r = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FloatLiteralNode(r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_val",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // const_val ::= CHARCONST 
            {
              ASTNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CharLiteralNode(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_val",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // const_val ::= FALSE 
            {
              ASTNode RESULT =null;
		 RESULT = new BooleanLiteralNode(false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_val",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // const_val ::= TRUE 
            {
              ASTNode RESULT =null;
		 RESULT = new BooleanLiteralNode(true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_val",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // const_val ::= STRINGCONST 
            {
              ASTNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StringLiteralNode(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_val",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // const_val ::= LONGCONST 
            {
              ASTNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Long l = (Long)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LongLiteralNode(l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_val",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // const_val ::= NULL 
            {
              ASTNode RESULT =null;
		 RESULT = new BaseASTNode(NodeType.NULL_LITERAL); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_val",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // program ::= program2 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
           Program p = new Program();
           p.addChild(t);
           setRoot(p);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // program2 ::= var_dcl program 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode p = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
           RESULT = p;
           RESULT.addChild(t);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program2",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // program2 ::= func_extern program 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode p = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
           RESULT = p;
           RESULT.addChild(t);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program2",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // program2 ::= struct_dec program 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode p = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
           RESULT = p;
           RESULT.addChild(t);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program2",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // program2 ::= var_dcl 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program2",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // program2 ::= func_extern 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program2",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // program2 ::= struct_dec 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program2",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // func_extern ::= func_dcl 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_extern",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // func_extern ::= extern_dcl 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_extern",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // func_dcl ::= FUNCTION type identifier LPAREN arguments RPAREN SEMICOLON 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ASTNode i = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode a = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
           RESULT = new BaseASTNode(NodeType.METHOD_DECLARATION);
           ASTNode b = new BaseASTNode(NodeType.BLOCK);
           RESULT.addChild(t, i, a, b);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_dcl",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // func_dcl ::= FUNCTION type identifier LPAREN RPAREN SEMICOLON 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ASTNode i = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
           RESULT = new BaseASTNode(NodeType.METHOD_DECLARATION);
           ASTNode b = new BaseASTNode(NodeType.BLOCK);
           ASTNode a = new BaseASTNode(NodeType.ARGUMENTS);
           RESULT.addChild(t, i, a, b);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_dcl",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // func_dcl ::= FUNCTION type identifier LPAREN arguments RPAREN block 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ASTNode i = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode a = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode b = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
           RESULT = new BaseASTNode(NodeType.METHOD_DECLARATION);
           RESULT.addChild(t, i, a, b);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_dcl",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // func_dcl ::= FUNCTION type identifier LPAREN RPAREN block 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ASTNode i = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode b = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
           RESULT = new BaseASTNode(NodeType.METHOD_DECLARATION);
           ASTNode a = new BaseASTNode(NodeType.ARGUMENTS);
           RESULT.addChild(t, i, a, b);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_dcl",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // extern_dcl ::= EXTERN type identifier 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode i = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new BaseASTNode(NodeType.VARIABLE_DECLARATION);
            RESULT.addChild(t, i);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("extern_dcl",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // arguments ::= type identifier 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode i = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new BaseASTNode(NodeType.ARGUMENTS);
            RESULT.addChild(t, i);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // arguments ::= type identifier arguments_middle 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode i = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int amright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode am = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new BaseASTNode(NodeType.ARGUMENTS);
            RESULT.addChild(t, i, am);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // arguments ::= type identifier COMMA arguments 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode i = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode a = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = a;
            RESULT.addChild(t, i);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // arguments ::= type identifier arguments_middle COMMA arguments 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ASTNode i = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode am = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode a = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = a;
            RESULT.addChild(t, i, am);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // arguments_middle ::= LBRACK RBRACK 
            {
              ASTNode RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments_middle",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // arguments_middle ::= LBRACK RBRACK arguments_middle 
            {
              ASTNode RESULT =null;
		int amleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int amright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode am = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments_middle",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // type ::= INT 
            {
              ASTNode RESULT =null;
		 RESULT = new TypeNode(NodeType.INT_TYPE, PrimitiveType.INT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // type ::= BOOL 
            {
              ASTNode RESULT =null;
		 RESULT = new TypeNode(NodeType.BOOLEAN_TYPE, PrimitiveType.BOOL); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // type ::= FLOAT 
            {
              ASTNode RESULT =null;
		 RESULT = new TypeNode(NodeType.FLOAT_TYPE, PrimitiveType.FLOAT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // type ::= LONG 
            {
              ASTNode RESULT =null;
		 RESULT = new TypeNode(NodeType.LONG_TYPE, PrimitiveType.LONG); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // type ::= CHAR 
            {
              ASTNode RESULT =null;
		 RESULT = new TypeNode(NodeType.CHAR_TYPE, PrimitiveType.CHAR); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // type ::= DOUBLE 
            {
              ASTNode RESULT =null;
		 RESULT = new TypeNode(NodeType.DOUBLE_TYPE, PrimitiveType.DOUBLE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // type ::= STRING 
            {
              ASTNode RESULT =null;
		 RESULT = new TypeNode(NodeType.STRING_TYPE, PrimitiveType.STRING); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // type ::= VOID 
            {
              ASTNode RESULT =null;
		 RESULT = new TypeNode(NodeType.VOID, PrimitiveType.VOID); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // type ::= AUTO 
            {
              ASTNode RESULT =null;
		 RESULT = new TypeNode(NodeType.AUTO_TYPE, PrimitiveType.AUTO); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // type ::= identifier 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // struct_dec ::= RECORD identifier BEGIN struct_dec_middle END RECORD 
            {
              ASTNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ASTNode i = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sdmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sdmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode sdm = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
            RESULT = new BaseASTNode(NodeType.STRUCT_DECLARATION);
            RESULT.addChild(i, sdm);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_dec",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // struct_dec_middle ::= var_dcl 
            {
              ASTNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode v = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_dec_middle",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // struct_dec_middle ::= var_dcl struct_dec_middle 
            {
              ASTNode RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode vd = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode s = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = s;
            RESULT.addChild(vd);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_dec_middle",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // var_dcl ::= type var_dcl_cnt var_dcl_end SEMICOLON 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int vdcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vdcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode vdc = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vdeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode vde = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            RESULT =  new BaseASTNode(NodeType.VARIABLE_DECLARATION);
            RESULT.addChild(t, vdc, vde);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // var_dcl ::= CONST type var_dcl var_dcl_end SEMICOLON 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode vd = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vdeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode vde = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            RESULT =  new BaseASTNode(NodeType.VARIABLE_CONST_DECLARATION);
            RESULT.addChild(t, vd, vde);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // var_dcl ::= type var_dcl_cnt SEMICOLON 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vdcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vdcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode vdc = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            RESULT =  new BaseASTNode(NodeType.VARIABLE_DECLARATION);
            ASTNode vde = new BaseASTNode(NodeType.VARIABLE_DECLARATION);
            RESULT.addChild(t, vdc, vde);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // var_dcl ::= CONST type var_dcl SEMICOLON 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode vd = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            RESULT =  new BaseASTNode(NodeType.VARIABLE_CONST_DECLARATION);
            ASTNode vde = new BaseASTNode(NodeType.VARIABLE_CONST_DECLARATION);
            RESULT.addChild(t, vd, vde);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // var_dcl_end ::= COMMA var_dcl_cnt var_dcl_end 
            {
              ASTNode RESULT =null;
		int vdcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vdcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode vdc = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vdeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode vde = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = vde;
            RESULT.addChild(vdc);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl_end",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // var_dcl_end ::= COMMA var_dcl_cnt 
            {
              ASTNode RESULT =null;
		int vdcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode vdc = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = vdc; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl_end",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // var_dcl_cnt ::= identifier 
            {
              ASTNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode i = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl_cnt",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // var_dcl_cnt ::= identifier ASSIGN expr 
            {
              ASTNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode i = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = i;
            RESULT.addChild(e);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl_cnt",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // block ::= BEGIN block_mid END 
            {
              ASTNode RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode b = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // block ::= BEGIN END 
            {
              ASTNode RESULT =null;
		 RESULT = new BaseASTNode(NodeType.BLOCK); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // block_mid ::= var_dcl block_mid 
            {
              ASTNode RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode vd = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode b = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = b;
            RESULT.addChild(vd);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_mid",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // block_mid ::= statement block_mid 
            {
              ASTNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode s = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode b = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = b;
            RESULT.addChild(s);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_mid",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // block_mid ::= var_dcl 
            {
              ASTNode RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode vd = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new BaseASTNode(NodeType.BLOCK);
            RESULT.addChild(vd);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_mid",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // block_mid ::= statement 
            {
              ASTNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode s = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new BaseASTNode(NodeType.BLOCK);
            RESULT.addChild(s);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_mid",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // statement ::= assignment SEMICOLON 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // statement ::= method_call SEMICOLON 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // statement ::= cond_stmt 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // statement ::= loop_stmt 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // statement ::= RETURN expr SEMICOLON 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            RESULT = new BaseASTNode(NodeType.RETURN_STATEMENT);
            RESULT.addChild(e);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // statement ::= RETURN SEMICOLON 
            {
              ASTNode RESULT =null;
		 RESULT = new BaseASTNode(NodeType.RETURN_STATEMENT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // statement ::= BREAK SEMICOLON 
            {
              ASTNode RESULT =null;
		 RESULT = new BaseASTNode(NodeType.BREAK_STATEMENT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // statement ::= CONTINUE SEMICOLON 
            {
              ASTNode RESULT =null;
		 RESULT = new BaseASTNode(NodeType.CONTINUE_STATEMENT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // assignment ::= variable ASSIGN expr 
            {
              ASTNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode v = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new BaseASTNode(NodeType.ASSIGN);
            RESULT.addChild(v,e);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // assignment ::= variable ADDASS expr 
            {
              ASTNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode v = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new BaseASTNode(NodeType.ADD_ASSIGN);
            RESULT.addChild(v,e);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // assignment ::= variable SUBASS expr 
            {
              ASTNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode v = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new BaseASTNode(NodeType.SUB_ASSIGN);
            RESULT.addChild(v,e);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // assignment ::= variable MULTASS expr 
            {
              ASTNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode v = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new BaseASTNode(NodeType.MULT_ASSIGN);
            RESULT.addChild(v,e);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // assignment ::= variable DIVASS expr 
            {
              ASTNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode v = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new BaseASTNode(NodeType.DIV_ASSIGN);
            RESULT.addChild(v,e);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // method_call ::= identifier LPAREN parameters RPAREN 
            {
              ASTNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ASTNode i = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode ps = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            RESULT = new BaseASTNode(NodeType.METHOD_ACCESS);
            RESULT.addChild(i, ps);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // method_call ::= identifier LPAREN RPAREN 
            {
              ASTNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode i = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
            RESULT = new BaseASTNode(NodeType.METHOD_ACCESS);
            ASTNode ps = new BaseASTNode(NodeType.PARAMETER);
            RESULT.addChild(i, ps);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // parameters ::= expr 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BaseASTNode(NodeType.PARAMETER); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // parameters ::= expr COMMA parameters 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int psright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode ps = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = ps;
            RESULT.addChild(e);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // cond_stmt ::= IF LPAREN expr RPAREN block 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode b = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new BaseASTNode(NodeType.IF_STATEMENT);
            RESULT.addChild(e, b);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_stmt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // cond_stmt ::= IF LPAREN expr RPAREN block ELSE block 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int b_ifleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int b_ifright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode b_if = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int b_elseleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int b_elseright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode b_else = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new BaseASTNode(NodeType.IF_STATEMENT);
            RESULT.addChild(e, b_if, b_else);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_stmt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // cond_stmt ::= SWITCH LPAREN identifier RPAREN OF COLON BEGIN DEFAULT COLON block END 
            {
              ASTNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		ASTNode i = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode b = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            RESULT = new BaseASTNode(NodeType.SWITCH_STATEMENT);
            ASTNode s = new BaseASTNode(NodeType.CASE_STATEMENT);
            RESULT.addChild(i, s, b);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_stmt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // cond_stmt ::= SWITCH LPAREN identifier RPAREN OF COLON BEGIN cond_stmt_mid DEFAULT COLON block END 
            {
              ASTNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		ASTNode i = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ASTNode s = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode b = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            RESULT = new BaseASTNode(NodeType.SWITCH_STATEMENT);
            RESULT.addChild(i, s, b);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_stmt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // cond_stmt_mid ::= CASE INTCONST COLON block 
            {
              ASTNode RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode b = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new BaseASTNode(NodeType.CASE_STATEMENT);
            RESULT.addChild(b);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_stmt_mid",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // cond_stmt_mid ::= CASE INTCONST COLON block cond_stmt_mid 
            {
              ASTNode RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode b = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode s = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = s;
            RESULT.addChild(b);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_stmt_mid",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // loop_stmt ::= FOR LPAREN assignment SEMICOLON expr SEMICOLON expression_assignment RPAREN block 
            {
              ASTNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		ASTNode i = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int beleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ASTNode be = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode ea = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode b = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new BaseASTNode(NodeType.FOR_STATEMENT);
            RESULT.addChild(i, be, ea);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_stmt",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // loop_stmt ::= FOR LPAREN SEMICOLON expr SEMICOLON expression_assignment RPAREN block 
            {
              ASTNode RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ASTNode be = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode ea = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode b = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new BaseASTNode(NodeType.FOR_STATEMENT);
            ASTNode i = new BaseASTNode(NodeType.ASSIGN);
            RESULT.addChild(i, be, ea);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_stmt",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // loop_stmt ::= FOR LPAREN assignment SEMICOLON expr SEMICOLON RPAREN block 
            {
              ASTNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ASTNode i = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int beleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ASTNode be = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
            RESULT = new BaseASTNode(NodeType.FOR_STATEMENT);
            ASTNode ea = new BaseASTNode(NodeType.ASSIGN);
            RESULT.addChild(i, be, ea);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_stmt",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // loop_stmt ::= FOR LPAREN SEMICOLON expr SEMICOLON RPAREN block 
            {
              ASTNode RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ASTNode be = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode b = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new BaseASTNode(NodeType.FOR_STATEMENT);
            ASTNode ea = new BaseASTNode(NodeType.ASSIGN);
            ASTNode i = new BaseASTNode(NodeType.ASSIGN);
            RESULT.addChild(i, be, ea);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_stmt",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // loop_stmt ::= REPEAT block UNTIL LPAREN expr RPAREN SEMICOLON 
            {
              ASTNode RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ASTNode b = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int beleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode be = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
	        RESULT = new BaseASTNode(NodeType.REPEAT_STATEMENT);
	        RESULT.addChild(b, be);
	    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_stmt",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // loop_stmt ::= FOREACH LPAREN identifier IN identifier RPAREN block 
            {
              ASTNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ASTNode r = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode i = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode b = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	        RESULT = new BaseASTNode(NodeType.FOREACH_STATEMENT);
	        RESULT.addChild(r, i);
	    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_stmt",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expression_assignment ::= expr 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_assignment",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expression_assignment ::= assignment 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_assignment",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expr ::= expr_operation 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expr ::= LPAREN expr RPAREN 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expr ::= method_call 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expr ::= variable 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expr ::= const_val 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expr ::= DEC variable 
            {
              ASTNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode v = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new BaseASTNode(NodeType.DECREMENT);
            RESULT.addChild(v);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expr ::= variable DEC 
            {
              ASTNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode v = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            RESULT = new BaseASTNode(NodeType.DECREMENT);
            RESULT.addChild(v);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expr ::= INC variable 
            {
              ASTNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode v = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new BaseASTNode(NodeType.INCREASMENT);
            RESULT.addChild(v);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expr ::= variable INC 
            {
              ASTNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode v = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            RESULT = new BaseASTNode(NodeType.INCREASMENT);
            RESULT.addChild(v);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expr ::= BITNEG expr 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new BaseASTNode(NodeType.BITWISE_NEGATIVE);
            RESULT.addChild(e);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expr ::= SIZEOF LPAREN type RPAREN 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            RESULT = new BaseASTNode(NodeType.SIZEOF);
            RESULT.addChild(t);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expr ::= MINUS expr 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new BaseASTNode(NodeType.UNARY_MINUS);
            RESULT.addChild(e);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expr ::= ADD expr 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new BaseASTNode(NodeType.UNARY_PLUS);
            RESULT.addChild(e);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // variable ::= identifier 
            {
              ASTNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode i = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // variable ::= identifier variable_mid 
            {
              ASTNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode i = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode vm = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // variable ::= variable DOT identifier 
            {
              ASTNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode v = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode i = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // variable ::= LPAREN variable RPAREN 
            {
              ASTNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode v = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // variable_mid ::= LBRACK expr RBRACK 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_mid",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // variable_mid ::= LBRACK expr RBRACK variable_mid 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode vm = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_mid",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expr_operation ::= expr ADD expr 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new BaseASTNode(NodeType.ADDITION);
            RESULT.addChild(e1);
            RESULT.addChild(e2);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_operation",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expr_operation ::= expr MINUS expr 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new BaseASTNode(NodeType.SUBTRACTION);
            RESULT.addChild(e1);
            RESULT.addChild(e2);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_operation",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expr_operation ::= expr PROD expr 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new BaseASTNode(NodeType.MULTIPLICATION);
            RESULT.addChild(e1);
            RESULT.addChild(e2);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_operation",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expr_operation ::= expr DIV expr 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new BaseASTNode(NodeType.DIVISION);
            RESULT.addChild(e1);
            RESULT.addChild(e2);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_operation",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expr_operation ::= expr MOD expr 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new BaseASTNode(NodeType.MOD);
            RESULT.addChild(e1);
            RESULT.addChild(e2);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_operation",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expr_operation ::= expr ARITHAND expr 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new BaseASTNode(NodeType.ARITHMETIC_AND);
            RESULT.addChild(e1);
            RESULT.addChild(e2);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_operation",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expr_operation ::= expr ARITHOR expr 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new BaseASTNode(NodeType.ARITHMETIC_OR);
            RESULT.addChild(e1);
            RESULT.addChild(e2);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_operation",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expr_operation ::= expr XOR expr 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new BaseASTNode(NodeType.XOR);
            RESULT.addChild(e1);
            RESULT.addChild(e2);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_operation",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // expr_operation ::= expr EQ expr 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new BaseASTNode(NodeType.EQUAL);
            RESULT.addChild(e1);
            RESULT.addChild(e2);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_operation",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expr_operation ::= expr NOTEQ expr 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new BaseASTNode(NodeType.NOT_EQUAL);
            RESULT.addChild(e1);
            RESULT.addChild(e2);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_operation",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expr_operation ::= expr GREQ expr 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new BaseASTNode(NodeType.GREATER_THAN_OR_EQUAL);
            RESULT.addChild(e1);
            RESULT.addChild(e2);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_operation",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expr_operation ::= expr LESSEQ expr 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new BaseASTNode(NodeType.LESS_THAN_OR_EQUAL);
            RESULT.addChild(e1);
            RESULT.addChild(e2);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_operation",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // expr_operation ::= expr GR expr 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new BaseASTNode(NodeType.GREATER_THAN);
            RESULT.addChild(e1);
            RESULT.addChild(e2);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_operation",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // expr_operation ::= expr LESS expr 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new BaseASTNode(NodeType.LESS_THAN);
            RESULT.addChild(e1);
            RESULT.addChild(e2);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_operation",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expr_operation ::= expr NOT expr 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new BaseASTNode(NodeType.BOOLEAN_NOT);
            RESULT.addChild(e1);
            RESULT.addChild(e2);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_operation",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expr_operation ::= expr LOGICAND expr 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new BaseASTNode(NodeType.BOOLEAN_AND);
            RESULT.addChild(e1);
            RESULT.addChild(e2);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_operation",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expr_operation ::= expr LOGICOR expr 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new BaseASTNode(NodeType.BOOLEAN_OR);
            RESULT.addChild(e1);
            RESULT.addChild(e2);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_operation",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
