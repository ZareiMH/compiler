
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import ast.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\173\000\002\002\004\000\002\034\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\002\004\000\002\002\004\000\002" +
    "\002\004\000\002\002\003\000\002\002\003\000\002\005" +
    "\003\000\002\005\003\000\002\007\011\000\002\007\010" +
    "\000\002\007\011\000\002\007\010\000\002\010\005\000" +
    "\002\012\004\000\002\012\005\000\002\012\006\000\002" +
    "\012\007\000\002\026\004\000\002\026\005\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\006\010\000\002\027\003\000\002\027\004\000\002\004" +
    "\006\000\002\004\007\000\002\004\005\000\002\004\006" +
    "\000\002\030\005\000\002\030\004\000\002\014\003\000" +
    "\002\014\005\000\002\013\005\000\002\013\004\000\002" +
    "\031\004\000\002\031\004\000\002\031\003\000\002\031" +
    "\003\000\002\017\004\000\002\017\004\000\002\017\003" +
    "\000\002\017\003\000\002\017\005\000\002\017\004\000" +
    "\002\017\004\000\002\017\004\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\021\006\000\002\021\005\000\002\024\003" +
    "\000\002\024\005\000\002\022\007\000\002\022\011\000" +
    "\002\022\015\000\002\022\016\000\002\032\006\000\002" +
    "\032\007\000\002\023\013\000\002\023\012\000\002\023" +
    "\012\000\002\023\011\000\002\023\011\000\002\023\011" +
    "\000\002\036\003\000\002\036\003\000\002\016\003\000" +
    "\002\016\005\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\004\000\002\016\004\000\002\016" +
    "\004\000\002\016\004\000\002\016\004\000\002\016\006" +
    "\000\002\016\004\000\002\016\004\000\002\016\004\000" +
    "\002\015\003\000\002\015\004\000\002\015\005\000\002" +
    "\015\005\000\002\033\005\000\002\033\006\000\002\035" +
    "\005\000\002\035\005\000\002\035\005\000\002\035\005" +
    "\000\002\035\005\000\002\035\005\000\002\035\005\000" +
    "\002\035\005\000\002\035\005\000\002\035\005\000\002" +
    "\035\005\000\002\035\005\000\002\035\005\000\002\035" +
    "\005\000\002\035\005\000\002\035\005\000\002\035\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0104\000\034\004\016\024\004\025\013\027\024\032" +
    "\011\033\022\036\027\041\020\044\007\045\005\051\017" +
    "\060\021\061\026\001\002\000\026\004\016\027\024\032" +
    "\011\036\027\041\020\044\007\045\005\051\017\060\021" +
    "\061\026\001\002\000\006\004\uffe2\012\uffe2\001\002\000" +
    "\006\004\uffdc\012\uffdc\001\002\000\006\004\uffe5\012\uffe5" +
    "\001\002\000\040\002\ufff1\004\ufff1\024\ufff1\025\ufff1\027" +
    "\ufff1\032\ufff1\033\ufff1\036\ufff1\041\ufff1\044\ufff1\045\ufff1" +
    "\047\ufff1\051\ufff1\060\ufff1\061\ufff1\001\002\000\006\004" +
    "\uffe1\012\uffe1\001\002\000\004\004\016\001\002\000\026" +
    "\004\016\027\024\032\011\036\027\041\020\044\007\045" +
    "\005\051\017\060\021\061\026\001\002\000\040\002\ufff2" +
    "\004\ufff2\024\ufff2\025\ufff2\027\ufff2\032\ufff2\033\ufff2\036" +
    "\ufff2\041\ufff2\044\ufff2\045\ufff2\047\ufff2\051\ufff2\060\ufff2" +
    "\061\ufff2\001\002\000\040\002\174\004\016\024\004\025" +
    "\013\027\024\032\011\033\022\036\027\041\020\044\007" +
    "\045\005\047\175\051\017\060\021\061\026\001\002\000" +
    "\142\002\000\004\000\007\000\010\000\011\000\012\000" +
    "\013\000\014\000\016\000\024\000\025\000\026\000\027" +
    "\000\032\000\033\000\036\000\041\000\044\000\045\000" +
    "\047\000\051\000\056\000\060\000\061\000\072\000\073" +
    "\000\074\000\075\000\076\000\077\000\100\000\101\000" +
    "\103\000\104\000\105\000\106\000\107\000\110\000\111" +
    "\000\112\000\113\000\114\000\115\000\116\000\117\000" +
    "\120\000\127\000\130\000\001\002\000\006\004\uffdf\012" +
    "\uffdf\001\002\000\006\004\uffe3\012\uffe3\001\002\000\006" +
    "\004\uffdd\012\uffdd\001\002\000\026\004\016\027\024\032" +
    "\011\036\027\041\020\044\007\045\005\051\017\060\021" +
    "\061\026\001\002\000\040\002\ufff3\004\ufff3\024\ufff3\025" +
    "\ufff3\027\ufff3\032\ufff3\033\ufff3\036\ufff3\041\ufff3\044\ufff3" +
    "\045\ufff3\047\ufff3\051\ufff3\060\ufff3\061\ufff3\001\002\000" +
    "\006\004\uffe4\012\uffe4\001\002\000\040\002\ufff4\004\ufff4" +
    "\024\ufff4\025\ufff4\027\ufff4\032\ufff4\033\ufff4\036\ufff4\041" +
    "\ufff4\044\ufff4\045\ufff4\047\ufff4\051\ufff4\060\ufff4\061\ufff4" +
    "\001\002\000\006\004\uffde\012\uffde\001\002\000\006\004" +
    "\uffe0\012\uffe0\001\002\000\004\004\016\001\002\000\010" +
    "\014\uffd2\016\uffd2\100\042\001\002\000\006\014\033\016" +
    "\034\001\002\000\004\004\016\001\002\000\064\002\uffd5" +
    "\004\uffd5\011\uffd5\024\uffd5\025\uffd5\027\uffd5\030\uffd5\032" +
    "\uffd5\033\uffd5\034\uffd5\036\uffd5\040\uffd5\041\uffd5\042\uffd5" +
    "\043\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\051\uffd5\052" +
    "\uffd5\054\uffd5\057\uffd5\060\uffd5\061\uffd5\001\002\000\006" +
    "\014\036\016\037\001\002\000\004\004\016\001\002\000" +
    "\064\002\uffd7\004\uffd7\011\uffd7\024\uffd7\025\uffd7\027\uffd7" +
    "\030\uffd7\032\uffd7\033\uffd7\034\uffd7\036\uffd7\040\uffd7\041" +
    "\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7\047\uffd7" +
    "\051\uffd7\052\uffd7\054\uffd7\057\uffd7\060\uffd7\061\uffd7\001" +
    "\002\000\006\014\uffd4\016\uffd4\001\002\000\006\014\uffd3" +
    "\016\uffd3\001\002\000\044\004\016\011\055\050\044\062" +
    "\070\063\052\064\060\065\057\066\063\067\054\070\050" +
    "\071\065\101\051\102\045\110\061\117\064\127\056\130" +
    "\062\001\002\000\054\010\uffa7\012\uffa7\014\uffa7\016\uffa7" +
    "\072\uffa7\073\uffa7\074\uffa7\075\uffa7\076\uffa7\077\uffa7\101" +
    "\uffa7\103\uffa7\104\uffa7\105\uffa7\106\uffa7\107\uffa7\110\uffa7" +
    "\115\uffa7\116\uffa7\117\uffa7\120\uffa7\001\002\000\004\011" +
    "\170\001\002\000\044\004\016\011\055\050\044\062\070" +
    "\063\052\064\060\065\057\066\063\067\054\070\050\071" +
    "\065\101\051\102\045\110\061\117\064\127\056\130\062" +
    "\001\002\000\050\014\uffd1\016\uffd1\072\105\073\104\074" +
    "\102\075\112\076\113\077\115\101\116\103\077\104\101" +
    "\105\110\106\100\107\107\110\106\115\111\116\103\117" +
    "\076\120\114\001\002\000\100\007\146\010\uff9d\011\160" +
    "\012\uff9d\013\uff9d\014\uff9d\016\uff9d\072\uff9d\073\uff9d\074" +
    "\uff9d\075\uff9d\076\uff9d\077\uff9d\100\uff9d\101\uff9d\103\uff9d" +
    "\104\uff9d\105\uff9d\106\uff9d\107\uff9d\110\uff9d\111\uff9d\112" +
    "\uff9d\113\uff9d\114\uff9d\115\uff9d\116\uff9d\117\uff9d\120\uff9d" +
    "\127\uff9d\130\uff9d\001\002\000\054\010\ufffa\012\ufffa\014" +
    "\ufffa\016\ufffa\072\ufffa\073\ufffa\074\ufffa\075\ufffa\076\ufffa" +
    "\077\ufffa\101\ufffa\103\ufffa\104\ufffa\105\ufffa\106\ufffa\107" +
    "\ufffa\110\ufffa\115\ufffa\116\ufffa\117\ufffa\120\ufffa\001\002" +
    "\000\044\004\016\011\055\050\044\062\070\063\052\064" +
    "\060\065\057\066\063\067\054\070\050\071\065\101\051" +
    "\102\045\110\061\117\064\127\056\130\062\001\002\000" +
    "\054\010\uffff\012\uffff\014\uffff\016\uffff\072\uffff\073\uffff" +
    "\074\uffff\075\uffff\076\uffff\077\uffff\101\uffff\103\uffff\104" +
    "\uffff\105\uffff\106\uffff\107\uffff\110\uffff\115\uffff\116\uffff" +
    "\117\uffff\120\uffff\001\002\000\054\010\uffab\012\uffab\014" +
    "\uffab\016\uffab\072\uffab\073\uffab\074\uffab\075\uffab\076\uffab" +
    "\077\uffab\101\uffab\103\uffab\104\uffab\105\uffab\106\uffab\107" +
    "\uffab\110\uffab\115\uffab\116\uffab\117\uffab\120\uffab\001\002" +
    "\000\054\010\ufffb\012\ufffb\014\ufffb\016\ufffb\072\ufffb\073" +
    "\ufffb\074\ufffb\075\ufffb\076\ufffb\077\ufffb\101\ufffb\103\ufffb" +
    "\104\ufffb\105\ufffb\106\ufffb\107\ufffb\110\ufffb\115\ufffb\116" +
    "\ufffb\117\ufffb\120\ufffb\001\002\000\044\004\016\011\055" +
    "\050\044\062\070\063\052\064\060\065\057\066\063\067" +
    "\054\070\050\071\065\101\051\102\045\110\061\117\064" +
    "\127\056\130\062\001\002\000\006\004\016\011\142\001" +
    "\002\000\054\010\ufffd\012\ufffd\014\ufffd\016\ufffd\072\ufffd" +
    "\073\ufffd\074\ufffd\075\ufffd\076\ufffd\077\ufffd\101\ufffd\103" +
    "\ufffd\104\ufffd\105\ufffd\106\ufffd\107\ufffd\110\ufffd\115\ufffd" +
    "\116\ufffd\117\ufffd\120\ufffd\001\002\000\054\010\ufffe\012" +
    "\ufffe\014\ufffe\016\ufffe\072\ufffe\073\ufffe\074\ufffe\075\ufffe" +
    "\076\ufffe\077\ufffe\101\ufffe\103\ufffe\104\ufffe\105\ufffe\106" +
    "\ufffe\107\ufffe\110\ufffe\115\ufffe\116\ufffe\117\ufffe\120\ufffe" +
    "\001\002\000\044\004\016\011\055\050\044\062\070\063" +
    "\052\064\060\065\057\066\063\067\054\070\050\071\065" +
    "\101\051\102\045\110\061\117\064\127\056\130\062\001" +
    "\002\000\006\004\016\011\142\001\002\000\054\010\ufffc" +
    "\012\ufffc\014\ufffc\016\ufffc\072\ufffc\073\ufffc\074\ufffc\075" +
    "\ufffc\076\ufffc\077\ufffc\101\ufffc\103\ufffc\104\ufffc\105\ufffc" +
    "\106\ufffc\107\ufffc\110\ufffc\115\ufffc\116\ufffc\117\ufffc\120" +
    "\ufffc\001\002\000\044\004\016\011\055\050\044\062\070" +
    "\063\052\064\060\065\057\066\063\067\054\070\050\071" +
    "\065\101\051\102\045\110\061\117\064\127\056\130\062" +
    "\001\002\000\054\010\ufff9\012\ufff9\014\ufff9\016\ufff9\072" +
    "\ufff9\073\ufff9\074\ufff9\075\ufff9\076\ufff9\077\ufff9\101\ufff9" +
    "\103\ufff9\104\ufff9\105\ufff9\106\ufff9\107\ufff9\110\ufff9\115" +
    "\ufff9\116\ufff9\117\ufff9\120\ufff9\001\002\000\062\010\uffa9" +
    "\012\uffa9\013\073\014\uffa9\016\uffa9\072\uffa9\073\uffa9\074" +
    "\uffa9\075\uffa9\076\uffa9\077\uffa9\101\uffa9\103\uffa9\104\uffa9" +
    "\105\uffa9\106\uffa9\107\uffa9\110\uffa9\115\uffa9\116\uffa9\117" +
    "\uffa9\120\uffa9\127\071\130\072\001\002\000\054\010\uffa8" +
    "\012\uffa8\014\uffa8\016\uffa8\072\uffa8\073\uffa8\074\uffa8\075" +
    "\uffa8\076\uffa8\077\uffa8\101\uffa8\103\uffa8\104\uffa8\105\uffa8" +
    "\106\uffa8\107\uffa8\110\uffa8\115\uffa8\116\uffa8\117\uffa8\120" +
    "\uffa8\001\002\000\054\010\ufff8\012\ufff8\014\ufff8\016\ufff8" +
    "\072\ufff8\073\ufff8\074\ufff8\075\ufff8\076\ufff8\077\ufff8\101" +
    "\ufff8\103\ufff8\104\ufff8\105\ufff8\106\ufff8\107\ufff8\110\ufff8" +
    "\115\ufff8\116\ufff8\117\ufff8\120\ufff8\001\002\000\054\010" +
    "\uffa3\012\uffa3\014\uffa3\016\uffa3\072\uffa3\073\uffa3\074\uffa3" +
    "\075\uffa3\076\uffa3\077\uffa3\101\uffa3\103\uffa3\104\uffa3\105" +
    "\uffa3\106\uffa3\107\uffa3\110\uffa3\115\uffa3\116\uffa3\117\uffa3" +
    "\120\uffa3\001\002\000\054\010\uffa5\012\uffa5\014\uffa5\016" +
    "\uffa5\072\uffa5\073\uffa5\074\uffa5\075\uffa5\076\uffa5\077\uffa5" +
    "\101\uffa5\103\uffa5\104\uffa5\105\uffa5\106\uffa5\107\uffa5\110" +
    "\uffa5\115\uffa5\116\uffa5\117\uffa5\120\uffa5\001\002\000\004" +
    "\004\016\001\002\000\074\010\uff9b\012\uff9b\013\uff9b\014" +
    "\uff9b\016\uff9b\072\uff9b\073\uff9b\074\uff9b\075\uff9b\076\uff9b" +
    "\077\uff9b\100\uff9b\101\uff9b\103\uff9b\104\uff9b\105\uff9b\106" +
    "\uff9b\107\uff9b\110\uff9b\111\uff9b\112\uff9b\113\uff9b\114\uff9b" +
    "\115\uff9b\116\uff9b\117\uff9b\120\uff9b\127\uff9b\130\uff9b\001" +
    "\002\000\054\010\uffa0\012\uffa0\014\uffa0\016\uffa0\072\uffa0" +
    "\073\uffa0\074\uffa0\075\uffa0\076\uffa0\077\uffa0\101\116\103" +
    "\uffa0\104\uffa0\105\uffa0\106\uffa0\107\uffa0\110\uffa0\115\uffa0" +
    "\116\uffa0\117\uffa0\120\uffa0\001\002\000\044\004\016\011" +
    "\055\050\044\062\070\063\052\064\060\065\057\066\063" +
    "\067\054\070\050\071\065\101\051\102\045\110\061\117" +
    "\064\127\056\130\062\001\002\000\044\004\016\011\055" +
    "\050\044\062\070\063\052\064\060\065\057\066\063\067" +
    "\054\070\050\071\065\101\051\102\045\110\061\117\064" +
    "\127\056\130\062\001\002\000\044\004\016\011\055\050" +
    "\044\062\070\063\052\064\060\065\057\066\063\067\054" +
    "\070\050\071\065\101\051\102\045\110\061\117\064\127" +
    "\056\130\062\001\002\000\044\004\016\011\055\050\044" +
    "\062\070\063\052\064\060\065\057\066\063\067\054\070" +
    "\050\071\065\101\051\102\045\110\061\117\064\127\056" +
    "\130\062\001\002\000\044\004\016\011\055\050\044\062" +
    "\070\063\052\064\060\065\057\066\063\067\054\070\050" +
    "\071\065\101\051\102\045\110\061\117\064\127\056\130" +
    "\062\001\002\000\044\004\016\011\055\050\044\062\070" +
    "\063\052\064\060\065\057\066\063\067\054\070\050\071" +
    "\065\101\051\102\045\110\061\117\064\127\056\130\062" +
    "\001\002\000\044\004\016\011\055\050\044\062\070\063" +
    "\052\064\060\065\057\066\063\067\054\070\050\071\065" +
    "\101\051\102\045\110\061\117\064\127\056\130\062\001" +
    "\002\000\044\004\016\011\055\050\044\062\070\063\052" +
    "\064\060\065\057\066\063\067\054\070\050\071\065\101" +
    "\051\102\045\110\061\117\064\127\056\130\062\001\002" +
    "\000\044\004\016\011\055\050\044\062\070\063\052\064" +
    "\060\065\057\066\063\067\054\070\050\071\065\101\051" +
    "\102\045\110\061\117\064\127\056\130\062\001\002\000" +
    "\044\004\016\011\055\050\044\062\070\063\052\064\060" +
    "\065\057\066\063\067\054\070\050\071\065\101\051\102" +
    "\045\110\061\117\064\127\056\130\062\001\002\000\044" +
    "\004\016\011\055\050\044\062\070\063\052\064\060\065" +
    "\057\066\063\067\054\070\050\071\065\101\051\102\045" +
    "\110\061\117\064\127\056\130\062\001\002\000\044\004" +
    "\016\011\055\050\044\062\070\063\052\064\060\065\057" +
    "\066\063\067\054\070\050\071\065\101\051\102\045\110" +
    "\061\117\064\127\056\130\062\001\002\000\044\004\016" +
    "\011\055\050\044\062\070\063\052\064\060\065\057\066" +
    "\063\067\054\070\050\071\065\101\051\102\045\110\061" +
    "\117\064\127\056\130\062\001\002\000\044\004\016\011" +
    "\055\050\044\062\070\063\052\064\060\065\057\066\063" +
    "\067\054\070\050\071\065\101\051\102\045\110\061\117" +
    "\064\127\056\130\062\001\002\000\044\004\016\011\055" +
    "\050\044\062\070\063\052\064\060\065\057\066\063\067" +
    "\054\070\050\071\065\101\051\102\045\110\061\117\064" +
    "\127\056\130\062\001\002\000\044\004\016\011\055\050" +
    "\044\062\070\063\052\064\060\065\057\066\063\067\054" +
    "\070\050\071\065\101\051\102\045\110\061\117\064\127" +
    "\056\130\062\001\002\000\044\004\016\011\055\050\044" +
    "\062\070\063\052\064\060\065\057\066\063\067\054\070" +
    "\050\071\065\101\051\102\045\110\061\117\064\127\056" +
    "\130\062\001\002\000\054\010\uff89\012\uff89\014\uff89\016" +
    "\uff89\072\uff89\073\uff89\074\uff89\075\uff89\076\uff89\077\uff89" +
    "\101\116\103\uff89\104\uff89\105\uff89\106\uff89\107\uff89\110" +
    "\uff89\115\uff89\116\uff89\117\uff89\120\uff89\001\002\000\054" +
    "\010\uff8d\012\uff8d\014\uff8d\016\uff8d\072\uff8d\073\uff8d\074" +
    "\uff8d\075\uff8d\076\uff8d\077\uff8d\101\116\103\uff8d\104\uff8d" +
    "\105\uff8d\106\uff8d\107\107\110\106\115\111\116\103\117" +
    "\076\120\uff8d\001\002\000\054\010\uff87\012\uff87\014\uff87" +
    "\016\uff87\072\105\073\104\074\102\075\112\076\113\077" +
    "\115\101\116\103\077\104\101\105\110\106\100\107\107" +
    "\110\106\115\111\116\103\117\076\120\uff87\001\002\000" +
    "\054\010\uff8b\012\uff8b\014\uff8b\016\uff8b\072\uff8b\073\uff8b" +
    "\074\uff8b\075\uff8b\076\uff8b\077\uff8b\101\116\103\uff8b\104" +
    "\uff8b\105\uff8b\106\uff8b\107\107\110\106\115\111\116\103" +
    "\117\076\120\uff8b\001\002\000\054\010\uff8a\012\uff8a\014" +
    "\uff8a\016\uff8a\072\uff8a\073\uff8a\074\uff8a\075\uff8a\076\uff8a" +
    "\077\uff8a\101\116\103\uff8a\104\uff8a\105\uff8a\106\uff8a\107" +
    "\107\110\106\115\111\116\103\117\076\120\uff8a\001\002" +
    "\000\054\010\uff94\012\uff94\014\uff94\016\uff94\072\uff94\073" +
    "\uff94\074\uff94\075\uff94\076\uff94\077\uff94\101\116\103\uff94" +
    "\104\uff94\105\uff94\106\uff94\107\uff94\110\uff94\115\uff94\116" +
    "\uff94\117\uff94\120\uff94\001\002\000\054\010\uff91\012\uff91" +
    "\014\uff91\016\uff91\072\105\073\104\074\102\075\112\076" +
    "\113\077\115\101\116\103\077\104\uff91\105\uff91\106\100" +
    "\107\107\110\106\115\111\116\103\117\076\120\uff91\001" +
    "\002\000\054\010\uff95\012\uff95\014\uff95\016\uff95\072\uff95" +
    "\073\uff95\074\uff95\075\uff95\076\uff95\077\uff95\101\116\103" +
    "\uff95\104\uff95\105\uff95\106\uff95\107\uff95\110\uff95\115\uff95" +
    "\116\uff95\117\uff95\120\uff95\001\002\000\054\010\uff97\012" +
    "\uff97\014\uff97\016\uff97\072\uff97\073\uff97\074\uff97\075\uff97" +
    "\076\uff97\077\uff97\101\116\103\uff97\104\uff97\105\uff97\106" +
    "\uff97\107\107\110\uff97\115\111\116\103\117\uff97\120\uff97" +
    "\001\002\000\054\010\uff8f\012\uff8f\014\uff8f\016\uff8f\072" +
    "\uff8f\073\uff8f\074\102\075\112\076\113\077\115\101\116" +
    "\103\uff8f\104\uff8f\105\uff8f\106\uff8f\107\107\110\106\115" +
    "\111\116\103\117\076\120\uff8f\001\002\000\054\010\uff8e" +
    "\012\uff8e\014\uff8e\016\uff8e\072\uff8e\073\uff8e\074\102\075" +
    "\112\076\113\077\115\101\116\103\uff8e\104\uff8e\105\uff8e" +
    "\106\uff8e\107\107\110\106\115\111\116\103\117\076\120" +
    "\uff8e\001\002\000\054\010\uff93\012\uff93\014\uff93\016\uff93" +
    "\072\uff93\073\uff93\074\uff93\075\uff93\076\uff93\077\uff93\101" +
    "\116\103\uff93\104\uff93\105\uff93\106\uff93\107\uff93\110\uff93" +
    "\115\uff93\116\uff93\117\uff93\120\uff93\001\002\000\054\010" +
    "\uff8c\012\uff8c\014\uff8c\016\uff8c\072\uff8c\073\uff8c\074\uff8c" +
    "\075\uff8c\076\uff8c\077\uff8c\101\116\103\uff8c\104\uff8c\105" +
    "\uff8c\106\uff8c\107\107\110\106\115\111\116\103\117\076" +
    "\120\uff8c\001\002\000\054\010\uff88\012\uff88\014\uff88\016" +
    "\uff88\072\105\073\104\074\102\075\112\076\113\077\115" +
    "\101\116\103\077\104\uff88\105\110\106\100\107\107\110" +
    "\106\115\111\116\103\117\076\120\uff88\001\002\000\054" +
    "\010\uff90\012\uff90\014\uff90\016\uff90\072\105\073\104\074" +
    "\102\075\112\076\113\077\115\101\116\103\077\104\uff90" +
    "\105\uff90\106\uff90\107\107\110\106\115\111\116\103\117" +
    "\076\120\uff90\001\002\000\054\010\uff92\012\uff92\014\uff92" +
    "\016\uff92\072\105\073\104\074\102\075\112\076\113\077" +
    "\115\101\116\103\uff92\104\uff92\105\uff92\106\uff92\107\107" +
    "\110\106\115\111\116\103\117\076\120\uff92\001\002\000" +
    "\054\010\uff96\012\uff96\014\uff96\016\uff96\072\uff96\073\uff96" +
    "\074\uff96\075\uff96\076\uff96\077\uff96\101\116\103\uff96\104" +
    "\uff96\105\uff96\106\uff96\107\107\110\uff96\115\111\116\103" +
    "\117\uff96\120\uff96\001\002\000\056\010\uffa6\012\uffa6\013" +
    "\073\014\uffa6\016\uffa6\072\uffa6\073\uffa6\074\uffa6\075\uffa6" +
    "\076\uffa6\077\uffa6\101\uffa6\103\uffa6\104\uffa6\105\uffa6\106" +
    "\uffa6\107\uffa6\110\uffa6\115\uffa6\116\uffa6\117\uffa6\120\uffa6" +
    "\001\002\000\072\007\146\010\uff9d\012\uff9d\013\uff9d\014" +
    "\uff9d\016\uff9d\072\uff9d\073\uff9d\074\uff9d\075\uff9d\076\uff9d" +
    "\077\uff9d\100\uff9d\101\uff9d\103\uff9d\104\uff9d\105\uff9d\106" +
    "\uff9d\107\uff9d\110\uff9d\111\uff9d\112\uff9d\113\uff9d\114\uff9d" +
    "\115\uff9d\116\uff9d\117\uff9d\120\uff9d\001\002\000\006\004" +
    "\016\011\142\001\002\000\006\012\144\013\073\001\002" +
    "\000\074\010\uff9a\012\uff9a\013\uff9a\014\uff9a\016\uff9a\072" +
    "\uff9a\073\uff9a\074\uff9a\075\uff9a\076\uff9a\077\uff9a\100\uff9a" +
    "\101\uff9a\103\uff9a\104\uff9a\105\uff9a\106\uff9a\107\uff9a\110" +
    "\uff9a\111\uff9a\112\uff9a\113\uff9a\114\uff9a\115\uff9a\116\uff9a" +
    "\117\uff9a\120\uff9a\127\uff9a\130\uff9a\001\002\000\074\010" +
    "\uff9c\012\uff9c\013\uff9c\014\uff9c\016\uff9c\072\uff9c\073\uff9c" +
    "\074\uff9c\075\uff9c\076\uff9c\077\uff9c\100\uff9c\101\uff9c\103" +
    "\uff9c\104\uff9c\105\uff9c\106\uff9c\107\uff9c\110\uff9c\111\uff9c" +
    "\112\uff9c\113\uff9c\114\uff9c\115\uff9c\116\uff9c\117\uff9c\120" +
    "\uff9c\127\uff9c\130\uff9c\001\002\000\044\004\016\011\055" +
    "\050\044\062\070\063\052\064\060\065\057\066\063\067" +
    "\054\070\050\071\065\101\051\102\045\110\061\117\064" +
    "\127\056\130\062\001\002\000\046\010\150\072\105\073" +
    "\104\074\102\075\112\076\113\077\115\101\116\103\077" +
    "\104\101\105\110\106\100\107\107\110\106\115\111\116" +
    "\103\117\076\120\114\001\002\000\076\007\146\010\uff99" +
    "\012\uff99\013\uff99\014\uff99\016\uff99\072\uff99\073\uff99\074" +
    "\uff99\075\uff99\076\uff99\077\uff99\100\uff99\101\uff99\103\uff99" +
    "\104\uff99\105\uff99\106\uff99\107\uff99\110\uff99\111\uff99\112" +
    "\uff99\113\uff99\114\uff99\115\uff99\116\uff99\117\uff99\120\uff99" +
    "\127\uff99\130\uff99\001\002\000\074\010\uff98\012\uff98\013" +
    "\uff98\014\uff98\016\uff98\072\uff98\073\uff98\074\uff98\075\uff98" +
    "\076\uff98\077\uff98\100\uff98\101\uff98\103\uff98\104\uff98\105" +
    "\uff98\106\uff98\107\uff98\110\uff98\111\uff98\112\uff98\113\uff98" +
    "\114\uff98\115\uff98\116\uff98\117\uff98\120\uff98\127\uff98\130" +
    "\uff98\001\002\000\054\010\uff9f\012\uff9f\014\uff9f\016\uff9f" +
    "\072\uff9f\073\uff9f\074\uff9f\075\uff9f\076\uff9f\077\uff9f\101" +
    "\116\103\uff9f\104\uff9f\105\uff9f\106\uff9f\107\uff9f\110\uff9f" +
    "\115\uff9f\116\uff9f\117\uff9f\120\uff9f\001\002\000\056\010" +
    "\uffa4\012\uffa4\013\073\014\uffa4\016\uffa4\072\uffa4\073\uffa4" +
    "\074\uffa4\075\uffa4\076\uffa4\077\uffa4\101\uffa4\103\uffa4\104" +
    "\uffa4\105\uffa4\106\uffa4\107\uffa4\110\uffa4\115\uffa4\116\uffa4" +
    "\117\uffa4\120\uffa4\001\002\000\046\012\156\072\105\073" +
    "\104\074\102\075\112\076\113\077\115\101\116\103\077" +
    "\104\101\105\110\106\100\107\107\110\106\115\111\116" +
    "\103\117\076\120\114\001\002\000\054\012\144\013\073" +
    "\072\uffa9\073\uffa9\074\uffa9\075\uffa9\076\uffa9\077\uffa9\101" +
    "\uffa9\103\uffa9\104\uffa9\105\uffa9\106\uffa9\107\uffa9\110\uffa9" +
    "\115\uffa9\116\uffa9\117\uffa9\120\uffa9\127\071\130\072\001" +
    "\002\000\054\010\uffaa\012\uffaa\014\uffaa\016\uffaa\072\uffaa" +
    "\073\uffaa\074\uffaa\075\uffaa\076\uffaa\077\uffaa\101\uffaa\103" +
    "\uffaa\104\uffaa\105\uffaa\106\uffaa\107\uffaa\110\uffaa\115\uffaa" +
    "\116\uffaa\117\uffaa\120\uffaa\001\002\000\054\010\uff9e\012" +
    "\uff9e\014\uff9e\016\uff9e\072\uff9e\073\uff9e\074\uff9e\075\uff9e" +
    "\076\uff9e\077\uff9e\101\116\103\uff9e\104\uff9e\105\uff9e\106" +
    "\uff9e\107\uff9e\110\uff9e\115\uff9e\116\uff9e\117\uff9e\120\uff9e" +
    "\001\002\000\046\004\016\011\055\012\162\050\044\062" +
    "\070\063\052\064\060\065\057\066\063\067\054\070\050" +
    "\071\065\101\051\102\045\110\061\117\064\127\056\130" +
    "\062\001\002\000\050\012\uffbb\014\uffbb\072\105\073\104" +
    "\074\102\075\112\076\113\077\115\101\116\103\077\104" +
    "\101\105\110\106\100\107\107\110\106\115\111\116\103" +
    "\117\076\120\114\001\002\000\054\010\uffbc\012\uffbc\014" +
    "\uffbc\016\uffbc\072\uffbc\073\uffbc\074\uffbc\075\uffbc\076\uffbc" +
    "\077\uffbc\101\uffbc\103\uffbc\104\uffbc\105\uffbc\106\uffbc\107" +
    "\uffbc\110\uffbc\115\uffbc\116\uffbc\117\uffbc\120\uffbc\001\002" +
    "\000\006\012\165\014\164\001\002\000\044\004\016\011" +
    "\055\050\044\062\070\063\052\064\060\065\057\066\063" +
    "\067\054\070\050\071\065\101\051\102\045\110\061\117" +
    "\064\127\056\130\062\001\002\000\054\010\uffbd\012\uffbd" +
    "\014\uffbd\016\uffbd\072\uffbd\073\uffbd\074\uffbd\075\uffbd\076" +
    "\uffbd\077\uffbd\101\uffbd\103\uffbd\104\uffbd\105\uffbd\106\uffbd" +
    "\107\uffbd\110\uffbd\115\uffbd\116\uffbd\117\uffbd\120\uffbd\001" +
    "\002\000\050\012\uffba\014\uffba\072\105\073\104\074\102" +
    "\075\112\076\113\077\115\101\116\103\077\104\101\105" +
    "\110\106\100\107\107\110\106\115\111\116\103\117\076" +
    "\120\114\001\002\000\054\010\uffa2\012\uffa2\014\uffa2\016" +
    "\uffa2\072\uffa2\073\uffa2\074\uffa2\075\uffa2\076\uffa2\077\uffa2" +
    "\101\116\103\uffa2\104\uffa2\105\uffa2\106\uffa2\107\uffa2\110" +
    "\uffa2\115\uffa2\116\uffa2\117\uffa2\120\uffa2\001\002\000\026" +
    "\004\016\027\024\032\011\036\027\041\020\044\007\045" +
    "\005\051\017\060\021\061\026\001\002\000\004\012\172" +
    "\001\002\000\054\010\uffa1\012\uffa1\014\uffa1\016\uffa1\072" +
    "\uffa1\073\uffa1\074\uffa1\075\uffa1\076\uffa1\077\uffa1\101\uffa1" +
    "\103\uffa1\104\uffa1\105\uffa1\106\uffa1\107\uffa1\110\uffa1\115" +
    "\uffa1\116\uffa1\117\uffa1\120\uffa1\001\002\000\040\002\ufff5" +
    "\004\ufff5\024\ufff5\025\ufff5\027\ufff5\032\ufff5\033\ufff5\036" +
    "\ufff5\041\ufff5\044\ufff5\045\ufff5\047\ufff5\051\ufff5\060\ufff5" +
    "\061\ufff5\001\002\000\004\002\001\001\002\000\004\004" +
    "\016\001\002\000\040\002\ufff6\004\ufff6\024\ufff6\025\ufff6" +
    "\027\ufff6\032\ufff6\033\ufff6\036\ufff6\041\ufff6\044\ufff6\045" +
    "\ufff6\047\ufff6\051\ufff6\060\ufff6\061\ufff6\001\002\000\040" +
    "\002\ufff7\004\ufff7\024\ufff7\025\ufff7\027\ufff7\032\ufff7\033" +
    "\ufff7\036\ufff7\041\ufff7\044\ufff7\045\ufff7\047\ufff7\051\ufff7" +
    "\060\ufff7\061\ufff7\001\002\000\004\026\201\001\002\000" +
    "\030\004\016\027\024\032\011\033\022\036\027\041\020" +
    "\044\007\045\005\051\017\060\021\061\026\001\002\000" +
    "\032\004\016\027\024\032\011\033\022\036\027\040\205" +
    "\041\020\044\007\045\005\051\017\060\021\061\026\001" +
    "\002\000\032\004\uffda\027\uffda\032\uffda\033\uffda\036\uffda" +
    "\040\uffda\041\uffda\044\uffda\045\uffda\051\uffda\060\uffda\061" +
    "\uffda\001\002\000\032\004\uffd9\027\uffd9\032\uffd9\033\uffd9" +
    "\036\uffd9\040\uffd9\041\uffd9\044\uffd9\045\uffd9\051\uffd9\060" +
    "\uffd9\061\uffd9\001\002\000\004\047\206\001\002\000\040" +
    "\002\uffdb\004\uffdb\024\uffdb\025\uffdb\027\uffdb\032\uffdb\033" +
    "\uffdb\036\uffdb\041\uffdb\044\uffdb\045\uffdb\047\uffdb\051\uffdb" +
    "\060\uffdb\061\uffdb\001\002\000\004\004\016\001\002\000" +
    "\004\011\211\001\002\000\030\004\016\012\214\027\024" +
    "\032\011\036\027\041\020\044\007\045\005\051\017\060" +
    "\021\061\026\001\002\000\006\012\373\014\372\001\002" +
    "\000\004\004\016\001\002\000\006\016\215\026\216\001" +
    "\002\000\040\002\uffef\004\uffef\024\uffef\025\uffef\027\uffef" +
    "\032\uffef\033\uffef\036\uffef\041\uffef\044\uffef\045\uffef\047" +
    "\uffef\051\uffef\060\uffef\061\uffef\001\002\000\054\004\016" +
    "\011\142\027\024\030\233\032\011\033\022\034\221\036" +
    "\027\040\224\041\020\042\237\043\227\044\007\045\005" +
    "\046\225\051\017\052\226\054\232\057\241\060\021\061" +
    "\026\001\002\000\040\002\uffed\004\uffed\024\uffed\025\uffed" +
    "\027\uffed\032\uffed\033\uffed\036\uffed\041\uffed\044\uffed\045" +
    "\uffed\047\uffed\051\uffed\060\uffed\061\uffed\001\002\000\004" +
    "\016\363\001\002\000\004\016\362\001\002\000\054\004" +
    "\uffcb\011\uffcb\027\uffcb\030\uffcb\032\uffcb\033\uffcb\034\uffcb" +
    "\036\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045" +
    "\uffcb\046\uffcb\051\uffcb\052\uffcb\054\uffcb\057\uffcb\060\uffcb" +
    "\061\uffcb\001\002\000\024\004\uffdc\007\146\011\160\013" +
    "\uff9d\100\uff9d\111\uff9d\112\uff9d\113\uff9d\114\uff9d\001\002" +
    "\000\074\002\uffcf\004\uffcf\011\uffcf\024\uffcf\025\uffcf\027" +
    "\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf" +
    "\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044" +
    "\uffcf\045\uffcf\046\uffcf\047\uffcf\051\uffcf\052\uffcf\054\uffcf" +
    "\055\uffcf\057\uffcf\060\uffcf\061\uffcf\001\002\000\046\004" +
    "\016\011\055\016\357\050\044\062\070\063\052\064\060" +
    "\065\057\066\063\067\054\070\050\071\065\101\051\102" +
    "\045\110\061\117\064\127\056\130\062\001\002\000\004" +
    "\011\330\001\002\000\004\011\322\001\002\000\054\004" +
    "\uffc7\011\uffc7\027\uffc7\030\uffc7\032\uffc7\033\uffc7\034\uffc7" +
    "\036\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\045" +
    "\uffc7\046\uffc7\051\uffc7\052\uffc7\054\uffc7\057\uffc7\060\uffc7" +
    "\061\uffc7\001\002\000\054\004\016\011\142\027\024\030" +
    "\233\032\011\033\022\034\221\036\027\040\320\041\020" +
    "\042\237\043\227\044\007\045\005\046\225\051\017\052" +
    "\226\054\232\057\241\060\021\061\026\001\002\000\004" +
    "\011\311\001\002\000\004\016\310\001\002\000\004\016" +
    "\307\001\002\000\054\004\uffc8\011\uffc8\027\uffc8\030\uffc8" +
    "\032\uffc8\033\uffc8\034\uffc8\036\uffc8\040\uffc8\041\uffc8\042" +
    "\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8\051\uffc8\052\uffc8" +
    "\054\uffc8\057\uffc8\060\uffc8\061\uffc8\001\002\000\016\013" +
    "\073\100\267\111\265\112\266\113\264\114\263\001\002" +
    "\000\004\011\250\001\002\000\054\004\uffcc\011\uffcc\027" +
    "\uffcc\030\uffcc\032\uffcc\033\uffcc\034\uffcc\036\uffcc\040\uffcc" +
    "\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\051" +
    "\uffcc\052\uffcc\054\uffcc\057\uffcc\060\uffcc\061\uffcc\001\002" +
    "\000\004\026\216\001\002\000\004\055\243\001\002\000" +
    "\004\011\244\001\002\000\044\004\016\011\055\050\044" +
    "\062\070\063\052\064\060\065\057\066\063\067\054\070" +
    "\050\071\065\101\051\102\045\110\061\117\064\127\056" +
    "\130\062\001\002\000\046\012\246\072\105\073\104\074" +
    "\102\075\112\076\113\077\115\101\116\103\077\104\101" +
    "\105\110\106\100\107\107\110\106\115\111\116\103\117" +
    "\076\120\114\001\002\000\004\016\247\001\002\000\054" +
    "\004\uffaf\011\uffaf\027\uffaf\030\uffaf\032\uffaf\033\uffaf\034" +
    "\uffaf\036\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf" +
    "\045\uffaf\046\uffaf\051\uffaf\052\uffaf\054\uffaf\057\uffaf\060" +
    "\uffaf\061\uffaf\001\002\000\010\004\016\011\142\016\251" +
    "\001\002\000\044\004\016\011\055\050\044\062\070\063" +
    "\052\064\060\065\057\066\063\067\054\070\050\071\065" +
    "\101\051\102\045\110\061\117\064\127\056\130\062\001" +
    "\002\000\004\016\253\001\002\000\044\004\016\011\055" +
    "\050\044\062\070\063\052\064\060\065\057\066\063\067" +
    "\054\070\050\071\065\101\051\102\045\110\061\117\064" +
    "\127\056\130\062\001\002\000\046\016\255\072\105\073" +
    "\104\074\102\075\112\076\113\077\115\101\116\103\077" +
    "\104\101\105\110\106\100\107\107\110\106\115\111\116" +
    "\103\117\076\120\114\001\002\000\046\004\016\011\055" +
    "\012\257\050\044\062\070\063\052\064\060\065\057\066" +
    "\063\067\054\070\050\071\065\101\051\102\045\110\061" +
    "\117\064\127\056\130\062\001\002\000\046\012\uffad\072" +
    "\105\073\104\074\102\075\112\076\113\077\115\101\116" +
    "\103\077\104\101\105\110\106\100\107\107\110\106\115" +
    "\111\116\103\117\076\120\114\001\002\000\004\026\216" +
    "\001\002\000\004\012\275\001\002\000\004\012\uffac\001" +
    "\002\000\066\012\uffa9\013\073\072\uffa9\073\uffa9\074\uffa9" +
    "\075\uffa9\076\uffa9\077\uffa9\100\267\101\uffa9\103\uffa9\104" +
    "\uffa9\105\uffa9\106\uffa9\107\uffa9\110\uffa9\111\265\112\266" +
    "\113\264\114\263\115\uffa9\116\uffa9\117\uffa9\120\uffa9\127" +
    "\071\130\072\001\002\000\044\004\016\011\055\050\044" +
    "\062\070\063\052\064\060\065\057\066\063\067\054\070" +
    "\050\071\065\101\051\102\045\110\061\117\064\127\056" +
    "\130\062\001\002\000\044\004\016\011\055\050\044\062" +
    "\070\063\052\064\060\065\057\066\063\067\054\070\050" +
    "\071\065\101\051\102\045\110\061\117\064\127\056\130" +
    "\062\001\002\000\044\004\016\011\055\050\044\062\070" +
    "\063\052\064\060\065\057\066\063\067\054\070\050\071" +
    "\065\101\051\102\045\110\061\117\064\127\056\130\062" +
    "\001\002\000\044\004\016\011\055\050\044\062\070\063" +
    "\052\064\060\065\057\066\063\067\054\070\050\071\065" +
    "\101\051\102\045\110\061\117\064\127\056\130\062\001" +
    "\002\000\044\004\016\011\055\050\044\062\070\063\052" +
    "\064\060\065\057\066\063\067\054\070\050\071\065\101" +
    "\051\102\045\110\061\117\064\127\056\130\062\001\002" +
    "\000\050\012\uffc2\016\uffc2\072\105\073\104\074\102\075" +
    "\112\076\113\077\115\101\116\103\077\104\101\105\110" +
    "\106\100\107\107\110\106\115\111\116\103\117\076\120" +
    "\114\001\002\000\050\012\uffc0\016\uffc0\072\105\073\104" +
    "\074\102\075\112\076\113\077\115\101\116\103\077\104" +
    "\101\105\110\106\100\107\107\110\106\115\111\116\103" +
    "\117\076\120\114\001\002\000\050\012\uffc1\016\uffc1\072" +
    "\105\073\104\074\102\075\112\076\113\077\115\101\116" +
    "\103\077\104\101\105\110\106\100\107\107\110\106\115" +
    "\111\116\103\117\076\120\114\001\002\000\050\012\uffbf" +
    "\016\uffbf\072\105\073\104\074\102\075\112\076\113\077" +
    "\115\101\116\103\077\104\101\105\110\106\100\107\107" +
    "\110\106\115\111\116\103\117\076\120\114\001\002\000" +
    "\050\012\uffbe\016\uffbe\072\105\073\104\074\102\075\112" +
    "\076\113\077\115\101\116\103\077\104\101\105\110\106" +
    "\100\107\107\110\106\115\111\116\103\117\076\120\114" +
    "\001\002\000\004\026\216\001\002\000\054\004\uffb3\011" +
    "\uffb3\027\uffb3\030\uffb3\032\uffb3\033\uffb3\034\uffb3\036\uffb3" +
    "\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046" +
    "\uffb3\051\uffb3\052\uffb3\054\uffb3\057\uffb3\060\uffb3\061\uffb3" +
    "\001\002\000\054\004\uffb1\011\uffb1\027\uffb1\030\uffb1\032" +
    "\uffb1\033\uffb1\034\uffb1\036\uffb1\040\uffb1\041\uffb1\042\uffb1" +
    "\043\uffb1\044\uffb1\045\uffb1\046\uffb1\051\uffb1\052\uffb1\054" +
    "\uffb1\057\uffb1\060\uffb1\061\uffb1\001\002\000\046\016\301" +
    "\072\105\073\104\074\102\075\112\076\113\077\115\101" +
    "\116\103\077\104\101\105\110\106\100\107\107\110\106" +
    "\115\111\116\103\117\076\120\114\001\002\000\046\004" +
    "\016\011\055\012\302\050\044\062\070\063\052\064\060" +
    "\065\057\066\063\067\054\070\050\071\065\101\051\102" +
    "\045\110\061\117\064\127\056\130\062\001\002\000\004" +
    "\026\216\001\002\000\004\012\304\001\002\000\004\026" +
    "\216\001\002\000\054\004\uffb2\011\uffb2\027\uffb2\030\uffb2" +
    "\032\uffb2\033\uffb2\034\uffb2\036\uffb2\040\uffb2\041\uffb2\042" +
    "\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2\051\uffb2\052\uffb2" +
    "\054\uffb2\057\uffb2\060\uffb2\061\uffb2\001\002\000\054\004" +
    "\uffb0\011\uffb0\027\uffb0\030\uffb0\032\uffb0\033\uffb0\034\uffb0" +
    "\036\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045" +
    "\uffb0\046\uffb0\051\uffb0\052\uffb0\054\uffb0\057\uffb0\060\uffb0" +
    "\061\uffb0\001\002\000\054\004\uffca\011\uffca\027\uffca\030" +
    "\uffca\032\uffca\033\uffca\034\uffca\036\uffca\040\uffca\041\uffca" +
    "\042\uffca\043\uffca\044\uffca\045\uffca\046\uffca\051\uffca\052" +
    "\uffca\054\uffca\057\uffca\060\uffca\061\uffca\001\002\000\054" +
    "\004\uffc4\011\uffc4\027\uffc4\030\uffc4\032\uffc4\033\uffc4\034" +
    "\uffc4\036\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4" +
    "\045\uffc4\046\uffc4\051\uffc4\052\uffc4\054\uffc4\057\uffc4\060" +
    "\uffc4\061\uffc4\001\002\000\004\004\016\001\002\000\004" +
    "\056\313\001\002\000\004\004\016\001\002\000\004\012" +
    "\315\001\002\000\004\026\216\001\002\000\054\004\uffae" +
    "\011\uffae\027\uffae\030\uffae\032\uffae\033\uffae\034\uffae\036" +
    "\uffae\040\uffae\041\uffae\042\uffae\043\uffae\044\uffae\045\uffae" +
    "\046\uffae\051\uffae\052\uffae\054\uffae\057\uffae\060\uffae\061" +
    "\uffae\001\002\000\054\004\uffcd\011\uffcd\027\uffcd\030\uffcd" +
    "\032\uffcd\033\uffcd\034\uffcd\036\uffcd\040\uffcd\041\uffcd\042" +
    "\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd\051\uffcd\052\uffcd" +
    "\054\uffcd\057\uffcd\060\uffcd\061\uffcd\001\002\000\074\002" +
    "\uffd0\004\uffd0\011\uffd0\024\uffd0\025\uffd0\027\uffd0\030\uffd0" +
    "\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037" +
    "\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0" +
    "\046\uffd0\047\uffd0\051\uffd0\052\uffd0\054\uffd0\055\uffd0\057" +
    "\uffd0\060\uffd0\061\uffd0\001\002\000\054\004\uffce\011\uffce" +
    "\027\uffce\030\uffce\032\uffce\033\uffce\034\uffce\036\uffce\040" +
    "\uffce\041\uffce\042\uffce\043\uffce\044\uffce\045\uffce\046\uffce" +
    "\051\uffce\052\uffce\054\uffce\057\uffce\060\uffce\061\uffce\001" +
    "\002\000\044\004\016\011\055\050\044\062\070\063\052" +
    "\064\060\065\057\066\063\067\054\070\050\071\065\101" +
    "\051\102\045\110\061\117\064\127\056\130\062\001\002" +
    "\000\046\012\324\072\105\073\104\074\102\075\112\076" +
    "\113\077\115\101\116\103\077\104\101\105\110\106\100" +
    "\107\107\110\106\115\111\116\103\117\076\120\114\001" +
    "\002\000\004\026\216\001\002\000\056\004\uffb9\011\uffb9" +
    "\027\uffb9\030\uffb9\032\uffb9\033\uffb9\034\uffb9\036\uffb9\037" +
    "\326\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9" +
    "\046\uffb9\051\uffb9\052\uffb9\054\uffb9\057\uffb9\060\uffb9\061" +
    "\uffb9\001\002\000\004\026\216\001\002\000\054\004\uffb8" +
    "\011\uffb8\027\uffb8\030\uffb8\032\uffb8\033\uffb8\034\uffb8\036" +
    "\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8" +
    "\046\uffb8\051\uffb8\052\uffb8\054\uffb8\057\uffb8\060\uffb8\061" +
    "\uffb8\001\002\000\004\004\016\001\002\000\004\012\332" +
    "\001\002\000\004\053\333\001\002\000\004\015\334\001" +
    "\002\000\004\026\335\001\002\000\006\031\340\035\336" +
    "\001\002\000\004\015\354\001\002\000\006\031\345\035" +
    "\344\001\002\000\004\063\341\001\002\000\004\015\342" +
    "\001\002\000\004\026\216\001\002\000\006\031\uffb5\035" +
    "\uffb5\001\002\000\004\015\351\001\002\000\004\063\346" +
    "\001\002\000\004\015\347\001\002\000\004\026\216\001" +
    "\002\000\006\031\uffb4\035\uffb4\001\002\000\004\026\216" +
    "\001\002\000\004\040\353\001\002\000\054\004\uffb6\011" +
    "\uffb6\027\uffb6\030\uffb6\032\uffb6\033\uffb6\034\uffb6\036\uffb6" +
    "\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\046" +
    "\uffb6\051\uffb6\052\uffb6\054\uffb6\057\uffb6\060\uffb6\061\uffb6" +
    "\001\002\000\004\026\216\001\002\000\004\040\356\001" +
    "\002\000\054\004\uffb7\011\uffb7\027\uffb7\030\uffb7\032\uffb7" +
    "\033\uffb7\034\uffb7\036\uffb7\040\uffb7\041\uffb7\042\uffb7\043" +
    "\uffb7\044\uffb7\045\uffb7\046\uffb7\051\uffb7\052\uffb7\054\uffb7" +
    "\057\uffb7\060\uffb7\061\uffb7\001\002\000\054\004\uffc5\011" +
    "\uffc5\027\uffc5\030\uffc5\032\uffc5\033\uffc5\034\uffc5\036\uffc5" +
    "\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046" +
    "\uffc5\051\uffc5\052\uffc5\054\uffc5\057\uffc5\060\uffc5\061\uffc5" +
    "\001\002\000\046\016\361\072\105\073\104\074\102\075" +
    "\112\076\113\077\115\101\116\103\077\104\101\105\110" +
    "\106\100\107\107\110\106\115\111\116\103\117\076\120" +
    "\114\001\002\000\054\004\uffc6\011\uffc6\027\uffc6\030\uffc6" +
    "\032\uffc6\033\uffc6\034\uffc6\036\uffc6\040\uffc6\041\uffc6\042" +
    "\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6\051\uffc6\052\uffc6" +
    "\054\uffc6\057\uffc6\060\uffc6\061\uffc6\001\002\000\054\004" +
    "\uffc3\011\uffc3\027\uffc3\030\uffc3\032\uffc3\033\uffc3\034\uffc3" +
    "\036\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045" +
    "\uffc3\046\uffc3\051\uffc3\052\uffc3\054\uffc3\057\uffc3\060\uffc3" +
    "\061\uffc3\001\002\000\054\004\uffc9\011\uffc9\027\uffc9\030" +
    "\uffc9\032\uffc9\033\uffc9\034\uffc9\036\uffc9\040\uffc9\041\uffc9" +
    "\042\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\051\uffc9\052" +
    "\uffc9\054\uffc9\057\uffc9\060\uffc9\061\uffc9\001\002\000\010" +
    "\007\366\012\uffeb\014\uffeb\001\002\000\010\007\370\012" +
    "\uffea\014\uffea\001\002\000\004\010\367\001\002\000\010" +
    "\007\uffe7\012\uffe7\014\uffe7\001\002\000\004\010\371\001" +
    "\002\000\010\007\uffe6\012\uffe6\014\uffe6\001\002\000\026" +
    "\004\016\027\024\032\011\036\027\041\020\044\007\045" +
    "\005\051\017\060\021\061\026\001\002\000\006\016\374" +
    "\026\216\001\002\000\040\002\ufff0\004\ufff0\024\ufff0\025" +
    "\ufff0\027\ufff0\032\ufff0\033\ufff0\036\ufff0\041\ufff0\044\ufff0" +
    "\045\ufff0\047\ufff0\051\ufff0\060\ufff0\061\ufff0\001\002\000" +
    "\040\002\uffee\004\uffee\024\uffee\025\uffee\027\uffee\032\uffee" +
    "\033\uffee\036\uffee\041\uffee\044\uffee\045\uffee\047\uffee\051" +
    "\uffee\060\uffee\061\uffee\001\002\000\004\004\016\001\002" +
    "\000\010\007\366\012\uffe9\014\uffe9\001\002\000\010\007" +
    "\370\012\uffe8\014\uffe8\001\002\000\006\014\033\016\u0102" +
    "\001\002\000\064\002\uffd6\004\uffd6\011\uffd6\024\uffd6\025" +
    "\uffd6\027\uffd6\030\uffd6\032\uffd6\033\uffd6\034\uffd6\036\uffd6" +
    "\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6\046" +
    "\uffd6\047\uffd6\051\uffd6\052\uffd6\054\uffd6\057\uffd6\060\uffd6" +
    "\061\uffd6\001\002\000\006\014\036\016\u0104\001\002\000" +
    "\064\002\uffd8\004\uffd8\011\uffd8\024\uffd8\025\uffd8\027\uffd8" +
    "\030\uffd8\032\uffd8\033\uffd8\034\uffd8\036\uffd8\040\uffd8\041" +
    "\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8" +
    "\051\uffd8\052\uffd8\054\uffd8\057\uffd8\060\uffd8\061\uffd8\001" +
    "\002\000\004\004\016\001\002\000\040\002\uffec\004\uffec" +
    "\024\uffec\025\uffec\027\uffec\032\uffec\033\uffec\036\uffec\041" +
    "\uffec\044\uffec\045\uffec\047\uffec\051\uffec\060\uffec\061\uffec" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0104\000\020\002\014\004\024\005\022\007\013\010" +
    "\007\011\011\034\005\001\001\000\006\011\u0104\034\005" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\014\u0100" +
    "\034\030\001\001\000\006\011\206\034\005\001\001\000" +
    "\002\001\001\000\020\004\176\005\175\006\172\007\013" +
    "\010\007\011\011\034\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\027\034\005\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\014\031\034\030\001\001\000\002\001\001\000" +
    "\004\030\034\001\001\000\006\014\040\034\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\014\037\034" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\015\065\016\045\021\042\025\066\034" +
    "\046\035\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\015\065\016\166\021\042\025\066\034\046\035" +
    "\052\001\001\000\002\001\001\000\004\033\144\001\001" +
    "\000\002\001\001\000\016\015\065\016\156\021\042\025" +
    "\066\034\046\035\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\015\154\016\153\021" +
    "\042\025\066\034\046\035\052\001\001\000\006\015\152" +
    "\034\140\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\015\065\016\151\021\042\025\066\034\046\035\052" +
    "\001\001\000\006\015\137\034\140\001\001\000\002\001" +
    "\001\000\016\015\065\016\074\021\042\025\066\034\046" +
    "\035\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\034\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\015\065\016\136\021\042\025\066" +
    "\034\046\035\052\001\001\000\016\015\065\016\135\021" +
    "\042\025\066\034\046\035\052\001\001\000\016\015\065" +
    "\016\134\021\042\025\066\034\046\035\052\001\001\000" +
    "\016\015\065\016\133\021\042\025\066\034\046\035\052" +
    "\001\001\000\016\015\065\016\132\021\042\025\066\034" +
    "\046\035\052\001\001\000\016\015\065\016\131\021\042" +
    "\025\066\034\046\035\052\001\001\000\016\015\065\016" +
    "\130\021\042\025\066\034\046\035\052\001\001\000\016" +
    "\015\065\016\127\021\042\025\066\034\046\035\052\001" +
    "\001\000\016\015\065\016\126\021\042\025\066\034\046" +
    "\035\052\001\001\000\016\015\065\016\125\021\042\025" +
    "\066\034\046\035\052\001\001\000\016\015\065\016\124" +
    "\021\042\025\066\034\046\035\052\001\001\000\016\015" +
    "\065\016\123\021\042\025\066\034\046\035\052\001\001" +
    "\000\016\015\065\016\122\021\042\025\066\034\046\035" +
    "\052\001\001\000\016\015\065\016\121\021\042\025\066" +
    "\034\046\035\052\001\001\000\016\015\065\016\120\021" +
    "\042\025\066\034\046\035\052\001\001\000\016\015\065" +
    "\016\117\021\042\025\066\034\046\035\052\001\001\000" +
    "\016\015\065\016\116\021\042\025\066\034\046\035\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\144" +
    "\001\001\000\006\015\142\034\140\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\015\065" +
    "\016\146\021\042\025\066\034\046\035\052\001\001\000" +
    "\002\001\001\000\004\033\150\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\015\065\016\160\021\042\024\162\025\066\034\046\035" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\015\065\016\165\021\042\025\066\034" +
    "\046\035\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\170\034\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\034\177\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\004\202\011\011" +
    "\027\201\034\005\001\001\000\010\004\203\011\011\034" +
    "\005\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\034\207\001\001\000" +
    "\002\001\001\000\010\011\212\012\211\034\005\001\001" +
    "\000\002\001\001\000\004\034\363\001\001\000\004\013" +
    "\216\001\001\000\002\001\001\000\026\004\237\011\011" +
    "\015\235\017\221\020\233\021\217\022\234\023\227\031" +
    "\230\034\222\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\033\144\001" +
    "\001\000\002\001\001\000\016\015\065\016\357\021\042" +
    "\025\066\034\046\035\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\004\320\011\011" +
    "\015\235\017\316\020\233\021\217\022\234\023\227\034" +
    "\222\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\241\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\015\065\016\244\021" +
    "\042\025\066\034\046\035\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\015\235\020" +
    "\251\034\140\001\001\000\016\015\065\016\277\021\042" +
    "\025\066\034\046\035\052\001\001\000\002\001\001\000" +
    "\016\015\065\016\253\021\042\025\066\034\046\035\052" +
    "\001\001\000\002\001\001\000\022\015\261\016\255\020" +
    "\260\021\042\025\066\034\046\035\052\036\257\001\001" +
    "\000\002\001\001\000\004\013\276\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\015\065" +
    "\016\273\021\042\025\066\034\046\035\052\001\001\000" +
    "\016\015\065\016\272\021\042\025\066\034\046\035\052" +
    "\001\001\000\016\015\065\016\271\021\042\025\066\034" +
    "\046\035\052\001\001\000\016\015\065\016\270\021\042" +
    "\025\066\034\046\035\052\001\001\000\016\015\065\016" +
    "\267\021\042\025\066\034\046\035\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\275\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\015" +
    "\261\016\255\020\260\021\042\025\066\034\046\035\052" +
    "\036\302\001\001\000\004\013\305\001\001\000\002\001" +
    "\001\000\004\013\304\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\034" +
    "\311\001\001\000\002\001\001\000\004\034\313\001\001" +
    "\000\002\001\001\000\004\013\315\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\015\065\016\322\021\042\025\066\034\046\035" +
    "\052\001\001\000\002\001\001\000\004\013\324\001\001" +
    "\000\002\001\001\000\004\013\326\001\001\000\002\001" +
    "\001\000\004\034\330\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\336\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\342\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\347\001\001\000\002\001\001\000" +
    "\004\013\351\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\354\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\364\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\375\034" +
    "\005\001\001\000\004\013\374\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\034\376\001\001\000\004\026" +
    "\377\001\001\000\002\001\001\000\004\030\u0102\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\034\u0105\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    protected Program root;

    void setRoot(Program p) { this.root = p; }

    public Program getRoot() { return this.root; }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode start_val = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // identifier ::= ID 
            {
              ASTNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IdentifierNode(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // const_val ::= INTCONST 
            {
              ASTNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IntegerLiteralNode(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_val",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // const_val ::= REALCONST 
            {
              ASTNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double r = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FloatLiteralNode(r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_val",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // const_val ::= CHARCONST 
            {
              ASTNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CharLiteralNode(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_val",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // const_val ::= FALSE 
            {
              ASTNode RESULT =null;
		 RESULT = new BooleanLiteralNode(false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_val",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // const_val ::= TRUE 
            {
              ASTNode RESULT =null;
		 RESULT = new BooleanLiteralNode(true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_val",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // const_val ::= STRINGCONST 
            {
              ASTNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StringLiteralNode(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_val",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // const_val ::= LONGCONST 
            {
              ASTNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Long l = (Long)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LongLiteralNode(l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_val",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // const_val ::= NULL 
            {
              ASTNode RESULT =null;
		 RESULT = new BaseASTNode(NodeType.NULL_LITERAL); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_val",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // program ::= program var_dcl 
            {
              ASTNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode p = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = p;
			RESULT.addChild(t);

        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // program ::= program func_extern 
            {
              ASTNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode p = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = p;
			RESULT.addChild(t);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // program ::= program struct_dec 
            {
              ASTNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode p = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = p;
			RESULT.addChild(t);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // program ::= var_dcl 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new Program();
			RESULT.addChild(t);
			setRoot((Program)RESULT);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // program ::= func_extern 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new Program();
			RESULT.addChild(t);
			setRoot((Program)RESULT);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // func_extern ::= func_dcl 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_extern",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // func_extern ::= extern_dcl 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_extern",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // func_dcl ::= FUNCTION type identifier LPAREN arguments RPAREN SEMICOLON 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ASTNode i = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode a = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
			RESULT = new BaseASTNode(NodeType.METHOD_DECLARATION);
			ASTNode b = new BaseASTNode(NodeType.BLOCK);
			RESULT.addChild(t, i, a, b);
			t.setParent(RESULT);
			i.setParent(RESULT);
			a.setParent(RESULT);
			b.setParent(RESULT);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_dcl",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // func_dcl ::= FUNCTION type identifier LPAREN RPAREN SEMICOLON 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ASTNode i = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
			RESULT = new BaseASTNode(NodeType.METHOD_DECLARATION);
			ASTNode b = new BaseASTNode(NodeType.BLOCK);
			ASTNode a = new BaseASTNode(NodeType.ARGUMENTS);
			RESULT.addChild(t, i, a, b);
			t.setParent(RESULT);
			i.setParent(RESULT);
			a.setParent(RESULT);
			b.setParent(RESULT);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_dcl",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // func_dcl ::= FUNCTION type identifier LPAREN arguments RPAREN block 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ASTNode i = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode a = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode b = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = new BaseASTNode(NodeType.METHOD_DECLARATION);
			RESULT.addChild(t, i, a, b);
			t.setParent(RESULT);
			i.setParent(RESULT);
			a.setParent(RESULT);
			b.setParent(RESULT);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_dcl",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // func_dcl ::= FUNCTION type identifier LPAREN RPAREN block 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ASTNode i = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode b = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = new BaseASTNode(NodeType.METHOD_DECLARATION);
			ASTNode a = new BaseASTNode(NodeType.ARGUMENTS);
			RESULT.addChild(t, i, a, b);
			t.setParent(RESULT);
            i.setParent(RESULT);
            a.setParent(RESULT);
            b.setParent(RESULT);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_dcl",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // extern_dcl ::= EXTERN type identifier 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode i = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = new BaseASTNode(NodeType.VARIABLE_DECLARATION);
			RESULT.addChild(t, i);
			t.setParent(RESULT);
			i.setParent(RESULT);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("extern_dcl",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // arguments ::= type identifier 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode i = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = new BaseASTNode(NodeType.ARGUMENTS);
			ASTNode a = new BaseASTNode(NodeType.ARGUMENT);
			a.addChild(t, i);
			t.setParent(a);
			i.setParent(a);
			RESULT.addChild(a);
			a.setParent(RESULT);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // arguments ::= type identifier arguments_middle 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode i = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int amright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode am = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // arguments ::= arguments COMMA type identifier 
            {
              ASTNode RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ASTNode as = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode i = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = as;
			ASTNode a = new BaseASTNode(NodeType.ARGUMENT);
			a.addChild(t, i);
			t.setParent(a);
			i.setParent(a);
			RESULT.addChild(a);
			a.setParent(RESULT);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // arguments ::= arguments COMMA type identifier arguments_middle 
            {
              ASTNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ASTNode a = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode i = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int amright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode am = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // arguments_middle ::= LBRACK RBRACK 
            {
              ASTNode RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments_middle",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // arguments_middle ::= arguments_middle LBRACK RBRACK 
            {
              ASTNode RESULT =null;
		int amleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode am = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments_middle",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // type ::= INT 
            {
              ASTNode RESULT =null;
		 RESULT = new TypeNode(NodeType.INT_TYPE, PrimitiveType.INT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // type ::= BOOL 
            {
              ASTNode RESULT =null;
		 RESULT = new TypeNode(NodeType.BOOLEAN_TYPE, PrimitiveType.BOOL); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // type ::= FLOAT 
            {
              ASTNode RESULT =null;
		 RESULT = new TypeNode(NodeType.FLOAT_TYPE, PrimitiveType.FLOAT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // type ::= LONG 
            {
              ASTNode RESULT =null;
		 RESULT = new TypeNode(NodeType.LONG_TYPE, PrimitiveType.LONG); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // type ::= CHAR 
            {
              ASTNode RESULT =null;
		 RESULT = new TypeNode(NodeType.CHAR_TYPE, PrimitiveType.CHAR); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // type ::= DOUBLE 
            {
              ASTNode RESULT =null;
		 RESULT = new TypeNode(NodeType.DOUBLE_TYPE, PrimitiveType.DOUBLE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // type ::= STRING 
            {
              ASTNode RESULT =null;
		 RESULT = new TypeNode(NodeType.STRING_TYPE, PrimitiveType.STRING); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // type ::= VOID 
            {
              ASTNode RESULT =null;
		 RESULT = new TypeNode(NodeType.VOID, PrimitiveType.VOID); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // type ::= AUTO 
            {
              ASTNode RESULT =null;
		 RESULT = new TypeNode(NodeType.AUTO_TYPE, PrimitiveType.AUTO); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // type ::= identifier 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // struct_dec ::= RECORD identifier BEGIN struct_dec_middle END RECORD 
            {
              ASTNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ASTNode i = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sdmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sdmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode sdm = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
			RESULT = new BaseASTNode(NodeType.STRUCT_DECLARATION);
			RESULT.addChild(i, sdm);
			i.setParent(RESULT);
			sdm.setParent(RESULT);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_dec",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // struct_dec_middle ::= var_dcl 
            {
              ASTNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode v = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_dec_middle",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // struct_dec_middle ::= struct_dec_middle var_dcl 
            {
              ASTNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode s = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode vd = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = s;
			RESULT.addChild(vd);
			vd.setParent(RESULT);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_dec_middle",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // var_dcl ::= type var_dcl_cnt var_dcl_end SEMICOLON 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int vdcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vdcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode vdc = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vdeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode vde = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			RESULT =  new BaseASTNode(NodeType.VARIABLE_DECLARATION);
			RESULT.addChild(t, vdc, vde);
			t.setParent(RESULT);
			vdc.setParent(RESULT);
			vde.setParent(RESULT);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // var_dcl ::= CONST type var_dcl_cnt var_dcl_end SEMICOLON 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int vdcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vdcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode vdc = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vdeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode vde = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			RESULT =  new BaseASTNode(NodeType.VARIABLE_CONST_DECLARATION);
			RESULT.addChild(t, vdc, vde);
			t.setParent(RESULT);
			vdc.setParent(RESULT);
			vde.setParent(RESULT);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // var_dcl ::= type var_dcl_cnt SEMICOLON 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vdcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vdcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode vdc = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			RESULT =  new BaseASTNode(NodeType.VARIABLE_DECLARATION);
			RESULT.addChild(t, vdc);
			t.setParent(RESULT);
			vdc.setParent(RESULT);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // var_dcl ::= CONST type var_dcl_cnt SEMICOLON 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vdcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vdcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode vdc = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            RESULT =  new BaseASTNode(NodeType.VARIABLE_CONST_DECLARATION);
            RESULT.addChild(t, vdc);
            t.setParent(RESULT);
            vdc.setParent(RESULT);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // var_dcl_end ::= var_dcl_end COMMA var_dcl_cnt 
            {
              ASTNode RESULT =null;
		int vdeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode vde = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vdcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode vdc = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = vde;
			RESULT.addChild(vdc);
			vdc.setParent(RESULT);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl_end",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // var_dcl_end ::= COMMA var_dcl_cnt 
            {
              ASTNode RESULT =null;
		int vdcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode vdc = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = vdc; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl_end",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // var_dcl_cnt ::= identifier 
            {
              ASTNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode i = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = i;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl_cnt",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // var_dcl_cnt ::= identifier ASSIGN expr 
            {
              ASTNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode i = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new BaseASTNode(NodeType.ASSIGN);
            ASTNode expr = new ExpressionNode();
            ASTNode v = new BaseASTNode(NodeType.VAR_USE);
            expr.addChild(v);
            v.setParent(expr);
            v.addChild(i);
            i.setParent(v);
            RESULT.addChild(expr,e);
            e.setParent(RESULT);
            expr.setParent(RESULT);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl_cnt",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // block ::= BEGIN block_mid END 
            {
              ASTNode RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode b = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // block ::= BEGIN END 
            {
              ASTNode RESULT =null;
		 RESULT = new BaseASTNode(NodeType.BLOCK); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // block_mid ::= block_mid var_dcl 
            {
              ASTNode RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode b = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode vd = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = b;
			RESULT.addChild(vd);
			vd.setParent(RESULT);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_mid",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // block_mid ::= block_mid statement 
            {
              ASTNode RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode b = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode s = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = b;
			RESULT.addChild(s);
			s.setParent(RESULT);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_mid",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // block_mid ::= var_dcl 
            {
              ASTNode RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode vd = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = new BaseASTNode(NodeType.BLOCK);
			RESULT.addChild(vd);
			vd.setParent(RESULT);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_mid",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // block_mid ::= statement 
            {
              ASTNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode s = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = new BaseASTNode(NodeType.BLOCK);
			RESULT.addChild(s);
			s.setParent(RESULT);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_mid",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // statement ::= assignment SEMICOLON 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // statement ::= method_call SEMICOLON 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // statement ::= cond_stmt 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // statement ::= loop_stmt 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // statement ::= RETURN expr SEMICOLON 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			RESULT = new BaseASTNode(NodeType.RETURN_STATEMENT);
			RESULT.addChild(e);
			e.setParent(RESULT);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // statement ::= RETURN SEMICOLON 
            {
              ASTNode RESULT =null;
		 RESULT = new BaseASTNode(NodeType.RETURN_STATEMENT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // statement ::= BREAK SEMICOLON 
            {
              ASTNode RESULT =null;
		 RESULT = new BaseASTNode(NodeType.BREAK_STATEMENT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // statement ::= CONTINUE SEMICOLON 
            {
              ASTNode RESULT =null;
		 RESULT = new BaseASTNode(NodeType.CONTINUE_STATEMENT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // assignment ::= variable ASSIGN expr 
            {
              ASTNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode v = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = new BaseASTNode(NodeType.ASSIGN);
			RESULT.addChild(v,e);
			v.setParent(RESULT);
			e.setParent(RESULT);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // assignment ::= variable ADDASS expr 
            {
              ASTNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode v = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = new BaseASTNode(NodeType.ASSIGN);
			ExpressionNode newExpr = new ExpressionNode();
			ASTNode op = BaseASTNode(NodeType.ADDITION);

			RESULT.addChild(v, newExpr);
			newExpr.setParent(RESULT);
			v.setParent(RESULT);

			newExpr.addChild(op);
			op.setParent(newExpr);

			op.addChild(v, e);
			v.setParent(op);
			e.setParent(op);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // assignment ::= variable SUBASS expr 
            {
              ASTNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode v = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = new BaseASTNode(NodeType.ASSIGN);
			ExpressionNode newExpr = new ExpressionNode();
			ASTNode op = BaseASTNode(NodeType.SUBTRACTION);

			RESULT.addChild(v, newExpr);
			newExpr.setParent(RESULT);
			v.setParent(RESULT);

			newExpr.addChild(op);
			op.setParent(newExpr);

			op.addChild(v, e);
			v.setParent(op);
			e.setParent(op);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // assignment ::= variable MULTASS expr 
            {
              ASTNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode v = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = new BaseASTNode(NodeType.ASSIGN);
			ExpressionNode newExpr = new ExpressionNode();
			ASTNode op = BaseASTNode(NodeType.MULTIPLICATION);

			RESULT.addChild(v, newExpr);
			newExpr.setParent(RESULT);
			v.setParent(RESULT);

			newExpr.addChild(op);
			op.setParent(newExpr);

			op.addChild(v, e);
			v.setParent(op);
			e.setParent(op);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // assignment ::= variable DIVASS expr 
            {
              ASTNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode v = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = new BaseASTNode(NodeType.ASSIGN);
			ExpressionNode newExpr = new ExpressionNode();
			ASTNode op = BaseASTNode(NodeType.DIVISION);

			RESULT.addChild(v, newExpr);
			newExpr.setParent(RESULT);
			v.setParent(RESULT);

			newExpr.addChild(op);
			op.setParent(newExpr);

			op.addChild(v, e);
			v.setParent(op);
			e.setParent(op);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // method_call ::= identifier LPAREN parameters RPAREN 
            {
              ASTNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ASTNode i = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode ps = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            RESULT = new BaseASTNode(NodeType.METHOD_ACCESS);
            RESULT.addChild(i, ps);
            i.setParent(RESULT);
            ps.setParent(RESULT);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // method_call ::= identifier LPAREN RPAREN 
            {
              ASTNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode i = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
            RESULT = new BaseASTNode(NodeType.METHOD_ACCESS);
            ASTNode ps = new BaseASTNode(NodeType.PARAMETERS);
            RESULT.addChild(i, ps);
            i.setParent(RESULT);
            ps.setParent(RESULT);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // parameters ::= expr 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            //PARAMETERS (result) -> PARAMETER (p) -> EXPR (e)
            RESULT = new BaseASTNode(NodeType.PARAMETERS);
            ASTNode p = new BaseASTNode(NodeType.PARAMETER);
            p.addChild(e);
            e.setParent(p);
            RESULT.addChild(p);
            p.setParent(RESULT);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // parameters ::= parameters COMMA expr 
            {
              ASTNode RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode ps = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = ps;
            ASTNode p = new BaseASTNode(NodeType.PARAMETER);
            p.addChild(e);
            e.setParent(p);
            RESULT.addChild(p);
            p.setParent(RESULT);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // cond_stmt ::= IF LPAREN expr RPAREN block 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode b = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new BaseASTNode(NodeType.IF_STATEMENT);
            RESULT.addChild(e, b);
            e.setParent(RESULT);
            b.setParent(RESULT);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_stmt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // cond_stmt ::= IF LPAREN expr RPAREN block ELSE block 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int b_ifleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int b_ifright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode b_if = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int b_elseleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int b_elseright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode b_else = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new BaseASTNode(NodeType.IF_STATEMENT);
            RESULT.addChild(e, b_if, b_else);
            e.setParent(RESULT);
            b_if.setParent(RESULT);
            b_else.setParent(RESULT);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_stmt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // cond_stmt ::= SWITCH LPAREN identifier RPAREN OF COLON BEGIN DEFAULT COLON block END 
            {
              ASTNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		ASTNode i = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode b = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            RESULT = new BaseASTNode(NodeType.SWITCH_STATEMENT);
            ASTNode s = new BaseASTNode(NodeType.CASE_STATEMENT);
            RESULT.addChild(i, s, b);
            i.setParent(RESULT);
            s.setParent(RESULT);
            b.setParent(RESULT);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_stmt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // cond_stmt ::= SWITCH LPAREN identifier RPAREN OF COLON BEGIN cond_stmt_mid DEFAULT COLON block END 
            {
              ASTNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		ASTNode i = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ASTNode s = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode b = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            RESULT = new BaseASTNode(NodeType.SWITCH_STATEMENT);
            RESULT.addChild(i, s, b);
            i.setParent(RESULT);
            s.setParent(RESULT);
            b.setParent(RESULT);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_stmt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // cond_stmt_mid ::= CASE INTCONST COLON block 
            {
              ASTNode RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode b = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new BaseASTNode(NodeType.CASE_STATEMENT);
            RESULT.addChild(b);
            b.setParent(RESULT);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_stmt_mid",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // cond_stmt_mid ::= cond_stmt_mid CASE INTCONST COLON block 
            {
              ASTNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ASTNode s = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode b = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = s;
            RESULT.addChild(b);
            b.setParent(RESULT);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_stmt_mid",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // loop_stmt ::= FOR LPAREN assignment SEMICOLON expr SEMICOLON expression_assignment RPAREN block 
            {
              ASTNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		ASTNode i = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int beleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ASTNode be = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode ea = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode b = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new BaseASTNode(NodeType.FOR_STATEMENT);
            RESULT.addChild(i, be, ea);
            i.setParent(RESULT);
            be.setParent(RESULT);
            ea.setParent(RESULT);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_stmt",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // loop_stmt ::= FOR LPAREN SEMICOLON expr SEMICOLON expression_assignment RPAREN block 
            {
              ASTNode RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ASTNode be = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode ea = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode b = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new BaseASTNode(NodeType.FOR_STATEMENT);
            ASTNode i = new BaseASTNode(NodeType.ASSIGN);
            RESULT.addChild(i, be, ea);
            i.setParent(RESULT);
            be.setParent(RESULT);
            ea.setParent(RESULT);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_stmt",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // loop_stmt ::= FOR LPAREN assignment SEMICOLON expr SEMICOLON RPAREN block 
            {
              ASTNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ASTNode i = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int beleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ASTNode be = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
            RESULT = new BaseASTNode(NodeType.FOR_STATEMENT);
            ASTNode ea = new BaseASTNode(NodeType.ASSIGN);
            RESULT.addChild(i, be, ea);
            i.setParent(RESULT);
            be.setParent(RESULT);
            ea.setParent(RESULT);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_stmt",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // loop_stmt ::= FOR LPAREN SEMICOLON expr SEMICOLON RPAREN block 
            {
              ASTNode RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ASTNode be = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode b = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new BaseASTNode(NodeType.FOR_STATEMENT);
            ASTNode ea = new BaseASTNode(NodeType.ASSIGN);
            ASTNode i = new BaseASTNode(NodeType.ASSIGN);
            RESULT.addChild(i, be, ea);
            i.setParent(RESULT);
            be.setParent(RESULT);
            ea.setParent(RESULT);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_stmt",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // loop_stmt ::= REPEAT block UNTIL LPAREN expr RPAREN SEMICOLON 
            {
              ASTNode RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ASTNode b = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int beleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode be = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
	        RESULT = new BaseASTNode(NodeType.REPEAT_STATEMENT);
	        RESULT.addChild(b, be);
	        b.setParent(RESULT);
	        be.setParent(RESULT);
	    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_stmt",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // loop_stmt ::= FOREACH LPAREN identifier IN identifier RPAREN block 
            {
              ASTNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ASTNode r = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode i = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode b = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	        RESULT = new BaseASTNode(NodeType.FOREACH_STATEMENT);
	        RESULT.addChild(r, i);
	        i.setParent(RESULT);
	        r.setParent(RESULT);
	    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_stmt",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expression_assignment ::= expr 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_assignment",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expression_assignment ::= assignment 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_assignment",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expr ::= expr_operation 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expr ::= LPAREN expr RPAREN 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expr ::= variable 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expr ::= const_val 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new ExpressionNode();
            RESULT.addChild(t);
            t.setParent(RESULT);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expr ::= method_call 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new ExpressionNode();
            RESULT.addChild(t);
            t.setParent(RESULT);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expr ::= DEC variable 
            {
              ASTNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode v = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            //EXPR (result) -> PREDEC (t) -> EXPR (expr) -> VARIABLE (v)

            RESULT = new ExpressionNode();
            ASTNode t = new BaseASTNode(NodeType.PRE_DECREMENT);
            ASTNode expr = new ExpressionNode();

            expr.addChild(v);
            v.setParent(expr);

            t.addChild(expr);
            expr.setParent(t);

            RESULT.addChild(t);
            t.setParent(RESULT);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expr ::= variable DEC 
            {
              ASTNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode v = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            //EXPR (result) -> POSTDEC (t) -> EXPR (expr) -> VARIABLE (v)

            RESULT = new ExpressionNode();
            ASTNode t = new BaseASTNode(NodeType.POST_DECREMENT);
            ASTNode expr = new ExpressionNode();

            expr.addChild(v);
            v.setParent(expr);

            t.addChild(expr);
            expr.setParent(t);

            RESULT.addChild(t);
            t.setParent(RESULT);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expr ::= INC variable 
            {
              ASTNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode v = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            //EXPR (result) -> PREINC (t) -> EXPR (expr) -> VARIABLE (v)

            RESULT = new ExpressionNode();
            ASTNode t = new BaseASTNode(NodeType.PRE_INCREMENT);
            ASTNode expr = new ExpressionNode();

            expr.addChild(v);
            v.setParent(expr);

            t.addChild(expr);
            expr.setParent(t);

            RESULT.addChild(t);
            t.setParent(RESULT);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expr ::= variable INC 
            {
              ASTNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode v = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            //EXPR (result) -> POSTINC (t) -> EXPR (expr) -> VARIABLE (v)

            RESULT = new ExpressionNode();
            ASTNode t = new BaseASTNode(NodeType.POST_INCREMENT);
            ASTNode expr = new ExpressionNode();

            expr.addChild(v);
            v.setParent(expr);

            t.addChild(expr);
            expr.setParent(t);

            RESULT.addChild(t);
            t.setParent(RESULT);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expr ::= BITNEG expr 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new ExpressionNode();
            ASTNode b = new BaseASTNode(NodeType.BITWISE_NEGATIVE);
            b.addChild(e);
            RESULT.addChild(b);
            e.setParent(b);
            b.setParent(RESULT);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expr ::= SIZEOF LPAREN type RPAREN 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            // expr (RESULT) -> sizeof (s) -> type (t)

            RESULT = new ExpressionNode();
            ASTNode s = new BaseASTNode(NodeType.SIZEOF);
            RESULT.addChild(s);
            s.setParent(RESULT);
            s.addChild(t);
            t.setParent(s);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expr ::= MINUS expr 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new ExpressionNode();
            ASTNode u = new BaseASTNode(NodeType.UNARY_MINUS);
            u.addChild(e);
            RESULT.addChild(u);
            e.setParent(u);
            u.setParent(RESULT);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expr ::= ADD expr 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new ExpressionNode();
            ASTNode u = new BaseASTNode(NodeType.UNARY_PLUS);
            u.addChild(e);
            RESULT.addChild(u);
            e.setParent(u);
            u.setParent(RESULT);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expr ::= NOT expr 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		    RESULT = new ExpressionNode();
            ASTNode u = new BaseASTNode(NodeType.BOOLEAN_NOT);
            u.addChild(e);
            RESULT.addChild(u);
            e.setParent(u);
            u.setParent(RESULT);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // variable ::= identifier 
            {
              ASTNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode i = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            //EXPR (result) -> VAR_USE (v) -> ID (i)
            RESULT = new ExpressionNode();
            ASTNode v = new BaseASTNode(NodeType.VAR_USE);
            v.addChild(i);
            RESULT.addChild(v);
            i.setParent(v);
            v.setParent(RESULT);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // variable ::= identifier variable_mid 
            {
              ASTNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode i = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode vm = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // variable ::= variable DOT identifier 
            {
              ASTNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode v = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode i = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // variable ::= LPAREN variable RPAREN 
            {
              ASTNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode v = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // variable_mid ::= LBRACK expr RBRACK 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_mid",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // variable_mid ::= LBRACK expr RBRACK variable_mid 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode vm = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_mid",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expr_operation ::= expr ADD expr 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new ExpressionNode();
            ASTNode t = new BaseASTNode(NodeType.ADDITION);
            t.addChild(e1);
            t.addChild(e2);
            RESULT.addChild(t);
            e1.setParent(t);
            e2.setParent(t);
            t.setParent(RESULT);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_operation",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expr_operation ::= expr MINUS expr 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new ExpressionNode();
            ASTNode t = new BaseASTNode(NodeType.SUBTRACTION);
            t.addChild(e1);
            t.addChild(e2);
            RESULT.addChild(t);
            e1.setParent(t);
            e2.setParent(t);
            t.setParent(RESULT);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_operation",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expr_operation ::= expr PROD expr 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            ASTNode t = new BaseASTNode(NodeType.MULTIPLICATION);
            RESULT = new ExpressionNode();
            t.addChild(e1);
            t.addChild(e2);
            RESULT.addChild(t);
            e1.setParent(t);
            e2.setParent(t);
            t.setParent(RESULT);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_operation",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expr_operation ::= expr DIV expr 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            ASTNode t = new BaseASTNode(NodeType.DIVISION);
            RESULT = new ExpressionNode();
            t.addChild(e1);
            t.addChild(e2);
            RESULT.addChild(t);
            e1.setParent(t);
            e2.setParent(t);
            t.setParent(RESULT);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_operation",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expr_operation ::= expr MOD expr 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            ASTNode t = new BaseASTNode(NodeType.MOD);
            RESULT = new ExpressionNode();
            t.addChild(e1);
            t.addChild(e2);
            RESULT.addChild(t);
            e1.setParent(t);
            e2.setParent(t);
            t.setParent(RESULT);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_operation",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expr_operation ::= expr ARITHAND expr 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            ASTNode t = new BaseASTNode(NodeType.ARITHMETIC_AND);
            RESULT = new ExpressionNode();
            t.addChild(e1);
            t.addChild(e2);
            RESULT.addChild(t);
            e1.setParent(t);
            e2.setParent(t);
            t.setParent(RESULT);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_operation",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expr_operation ::= expr ARITHOR expr 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            ASTNode t = new BaseASTNode(NodeType.ARITHMETIC_OR);
            RESULT = new ExpressionNode();
            t.addChild(e1);
            t.addChild(e2);
            RESULT.addChild(t);
            e1.setParent(t);
            e2.setParent(t);
            t.setParent(RESULT);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_operation",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expr_operation ::= expr XOR expr 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            ASTNode t = new BaseASTNode(NodeType.XOR);
            RESULT = new ExpressionNode();
            t.addChild(e1);
            t.addChild(e2);
            RESULT.addChild(t);
            e1.setParent(t);
            e2.setParent(t);
            t.setParent(RESULT);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_operation",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expr_operation ::= expr EQ expr 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            ASTNode t = new BaseASTNode(NodeType.EQUAL);
            RESULT = new ExpressionNode();
            t.addChild(e1);
            t.addChild(e2);
            RESULT.addChild(t);
            e1.setParent(t);
            e2.setParent(t);
            t.setParent(RESULT);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_operation",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // expr_operation ::= expr NOTEQ expr 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            ASTNode t = new BaseASTNode(NodeType.NOT_EQUAL);
            RESULT = new ExpressionNode();
            t.addChild(e1);
            t.addChild(e2);
            RESULT.addChild(t);
            e1.setParent(t);
            e2.setParent(t);
            t.setParent(RESULT);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_operation",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expr_operation ::= expr GREQ expr 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            ASTNode t = new BaseASTNode(NodeType.GREATER_THAN_OR_EQUAL);
            RESULT = new ExpressionNode();
            t.addChild(e1);
            t.addChild(e2);
            RESULT.addChild(t);
            e1.setParent(t);
            e2.setParent(t);
            t.setParent(RESULT);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_operation",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expr_operation ::= expr LESSEQ expr 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            ASTNode t = new BaseASTNode(NodeType.LESS_THAN_OR_EQUAL);
            RESULT = new ExpressionNode();
            t.addChild(e1);
            t.addChild(e2);
            RESULT.addChild(t);
            e1.setParent(t);
            e2.setParent(t);
            t.setParent(RESULT);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_operation",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expr_operation ::= expr GR expr 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            ASTNode t = new BaseASTNode(NodeType.GREATER_THAN);
            RESULT = new ExpressionNode();
            t.addChild(e1);
            t.addChild(e2);
            RESULT.addChild(t);
            e1.setParent(t);
            e2.setParent(t);
            t.setParent(RESULT);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_operation",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // expr_operation ::= expr LESS expr 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            ASTNode t = new BaseASTNode(NodeType.LESS_THAN);
            RESULT = new ExpressionNode();
            t.addChild(e1);
            t.addChild(e2);
            RESULT.addChild(t);
            e1.setParent(t);
            e2.setParent(t);
            t.setParent(RESULT);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_operation",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // expr_operation ::= expr NOT expr 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            ASTNode t = new BaseASTNode(NodeType.BOOLEAN_NOT);
            RESULT = new ExpressionNode();
            t.addChild(e1);
            t.addChild(e2);
            RESULT.addChild(t);
            e1.setParent(t);
            e2.setParent(t);
            t.setParent(RESULT);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_operation",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expr_operation ::= expr LOGICAND expr 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            ASTNode t = new BaseASTNode(NodeType.BOOLEAN_AND);
            RESULT = new ExpressionNode();
            t.addChild(e1);
            t.addChild(e2);
            RESULT.addChild(t);
            e1.setParent(t);
            e2.setParent(t);
            t.setParent(RESULT);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_operation",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expr_operation ::= expr LOGICOR expr 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            ASTNode t = new BaseASTNode(NodeType.BOOLEAN_OR);
            RESULT = new ExpressionNode();
            t.addChild(e1);
            t.addChild(e2);
            RESULT.addChild(t);
            e1.setParent(t);
            e2.setParent(t);
            t.setParent(RESULT);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_operation",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
